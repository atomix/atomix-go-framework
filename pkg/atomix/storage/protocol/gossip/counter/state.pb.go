// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/storage/protocol/gossip/counter/state.proto

package counter

import (
	fmt "fmt"
	meta "github.com/atomix/api/go/atomix/primitive/meta"
	_ "github.com/atomix/go-framework/pkg/atomix/storage/protocol/gossip/primitive"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CounterState struct {
	meta.ObjectMeta `protobuf:"bytes,1,opt,name=meta,proto3,embedded=meta" json:"meta"`
	Increments      map[string]int64 `protobuf:"bytes,2,rep,name=increments,proto3" json:"increments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Decrements      map[string]int64 `protobuf:"bytes,3,rep,name=decrements,proto3" json:"decrements,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *CounterState) Reset()         { *m = CounterState{} }
func (m *CounterState) String() string { return proto.CompactTextString(m) }
func (*CounterState) ProtoMessage()    {}
func (*CounterState) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e1c75c6e0f8a162, []int{0}
}
func (m *CounterState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CounterState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CounterState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CounterState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CounterState.Merge(m, src)
}
func (m *CounterState) XXX_Size() int {
	return m.Size()
}
func (m *CounterState) XXX_DiscardUnknown() {
	xxx_messageInfo_CounterState.DiscardUnknown(m)
}

var xxx_messageInfo_CounterState proto.InternalMessageInfo

func (m *CounterState) GetIncrements() map[string]int64 {
	if m != nil {
		return m.Increments
	}
	return nil
}

func (m *CounterState) GetDecrements() map[string]int64 {
	if m != nil {
		return m.Decrements
	}
	return nil
}

func init() {
	proto.RegisterType((*CounterState)(nil), "atomix.storage.protocol.gossip.counter.CounterState")
	proto.RegisterMapType((map[string]int64)(nil), "atomix.storage.protocol.gossip.counter.CounterState.DecrementsEntry")
	proto.RegisterMapType((map[string]int64)(nil), "atomix.storage.protocol.gossip.counter.CounterState.IncrementsEntry")
}

func init() {
	proto.RegisterFile("atomix/storage/protocol/gossip/counter/state.proto", fileDescriptor_9e1c75c6e0f8a162)
}

var fileDescriptor_9e1c75c6e0f8a162 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x90, 0xb1, 0x4e, 0xc2, 0x40,
	0x18, 0xc7, 0x7b, 0x54, 0x4d, 0x3c, 0x48, 0x34, 0x0d, 0x43, 0xc3, 0x50, 0x90, 0xc1, 0x74, 0xba,
	0x4b, 0x70, 0x51, 0x13, 0x17, 0xc0, 0xc1, 0xc1, 0x98, 0xd4, 0x27, 0x28, 0xe5, 0x4b, 0x73, 0x4a,
	0x7b, 0xa4, 0xf7, 0x41, 0xe0, 0x01, 0x4c, 0x1c, 0x7d, 0x01, 0xdf, 0x87, 0x91, 0xd1, 0x89, 0x18,
	0x78, 0x11, 0x73, 0xbd, 0x0a, 0xa4, 0x8b, 0x1a, 0xb7, 0xaf, 0xfd, 0xf2, 0xfb, 0xff, 0x7f, 0xf7,
	0xd1, 0x4e, 0x88, 0x32, 0x11, 0x33, 0xae, 0x50, 0x66, 0x61, 0x0c, 0x7c, 0x9c, 0x49, 0x94, 0x91,
	0x1c, 0xf1, 0x58, 0x2a, 0x25, 0xc6, 0x3c, 0x92, 0x93, 0x14, 0x21, 0xe3, 0x0a, 0x43, 0x04, 0x96,
	0x6f, 0x9d, 0x73, 0xc3, 0xb0, 0x82, 0x61, 0xdf, 0x0c, 0x33, 0x0c, 0x2b, 0x98, 0x46, 0xbb, 0xc8,
	0x1e, 0x67, 0x22, 0x11, 0x28, 0xa6, 0xc0, 0x13, 0xc0, 0x90, 0xcb, 0xc1, 0x13, 0x44, 0x68, 0xa8,
	0xc6, 0xd5, 0x0f, 0xfd, 0x3b, 0x16, 0x66, 0x08, 0xa9, 0x12, 0x32, 0x55, 0x05, 0x5a, 0x8f, 0x65,
	0x2c, 0xf3, 0x91, 0xeb, 0xc9, 0xfc, 0x6d, 0xbf, 0xdb, 0xb4, 0xd6, 0x33, 0x02, 0x8f, 0xda, 0xd9,
	0xe9, 0xd1, 0x03, 0x5d, 0xeb, 0x92, 0x16, 0xf1, 0xab, 0x9d, 0x33, 0x56, 0xc8, 0x6f, 0x83, 0x99,
	0xde, 0xb2, 0x87, 0x5c, 0xea, 0x1e, 0x30, 0xec, 0xd6, 0x16, 0xab, 0xa6, 0xb5, 0x5c, 0x35, 0xc9,
	0xeb, 0x8b, 0x4f, 0x82, 0x1c, 0x76, 0x86, 0x94, 0x8a, 0x34, 0xca, 0x20, 0x81, 0x14, 0x95, 0x5b,
	0x69, 0xd9, 0x7e, 0xb5, 0xd3, 0x67, 0xbf, 0xbb, 0x03, 0xdb, 0xd7, 0x61, 0x77, 0xdb, 0x98, 0xdb,
	0x14, 0xb3, 0x79, 0xb0, 0x97, 0xab, 0x5b, 0x86, 0xb0, 0x6d, 0xb1, 0xff, 0xd1, 0xd2, 0x87, 0x52,
	0xcb, 0x2e, 0xb7, 0x71, 0x43, 0x4f, 0x4a, 0x12, 0xce, 0x29, 0xb5, 0x9f, 0x61, 0x9e, 0x9f, 0xe8,
	0x38, 0xd0, 0xa3, 0x53, 0xa7, 0x87, 0xd3, 0x70, 0x34, 0x01, 0xb7, 0xd2, 0x22, 0xbe, 0x1d, 0x98,
	0x8f, 0xeb, 0xca, 0x25, 0xd1, 0x78, 0x29, 0xfd, 0x2f, 0x78, 0xd7, 0x5d, 0xac, 0x3d, 0xb2, 0x5c,
	0x7b, 0xe4, 0x73, 0xed, 0x91, 0xb7, 0x8d, 0x67, 0x2d, 0x37, 0x9e, 0xf5, 0xb1, 0xf1, 0xac, 0xc1,
	0x51, 0xfe, 0xb2, 0x8b, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x48, 0x84, 0x6b, 0x89, 0x93, 0x02,
	0x00, 0x00,
}

func (m *CounterState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CounterState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CounterState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Decrements) > 0 {
		for k := range m.Decrements {
			v := m.Decrements[k]
			baseI := i
			i = encodeVarintState(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintState(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintState(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Increments) > 0 {
		for k := range m.Increments {
			v := m.Increments[k]
			baseI := i
			i = encodeVarintState(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintState(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintState(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintState(dAtA []byte, offset int, v uint64) int {
	offset -= sovState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CounterState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovState(uint64(l))
	if len(m.Increments) > 0 {
		for k, v := range m.Increments {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovState(uint64(len(k))) + 1 + sovState(uint64(v))
			n += mapEntrySize + 1 + sovState(uint64(mapEntrySize))
		}
	}
	if len(m.Decrements) > 0 {
		for k, v := range m.Decrements {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovState(uint64(len(k))) + 1 + sovState(uint64(v))
			n += mapEntrySize + 1 + sovState(uint64(mapEntrySize))
		}
	}
	return n
}

func sovState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozState(x uint64) (n int) {
	return sovState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CounterState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CounterState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CounterState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Increments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Increments == nil {
				m.Increments = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowState
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthState
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthState
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowState
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipState(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthState
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Increments[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decrements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Decrements == nil {
				m.Decrements = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowState
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthState
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthState
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowState
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipState(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthState
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Decrements[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupState = fmt.Errorf("proto: unexpected end of group")
)
