/*
Copyright 2021-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.storage.protocol.gossip;

import "atomix/primitive/meta/object.proto";
import "atomix/primitive/meta/timestamp.proto";
import "gogoproto/gogo.proto";

message ServiceId {
    string type = 1 [(gogoproto.casttype) = "ServiceType"];
    string namespace = 2;
    string name = 3;
}

message RequestHeader {
    uint32 partition_id = 1 [(gogoproto.customname) = "PartitionID", (gogoproto.casttype) = "PartitionID"];
    ServiceId service_id = 2 [(gogoproto.customname) = "ServiceID", (gogoproto.nullable) = false];
    string member_id = 3 [(gogoproto.customname) = "MemberID", (gogoproto.casttype) = "MemberID"];
    atomix.primitive.meta.Timestamp timestamp = 4 [(gogoproto.nullable) = false];
}

message ResponseHeader {
    atomix.primitive.meta.Timestamp timestamp = 1 [(gogoproto.nullable) = false];
}

message ReadAllRequest {
    RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message ReadAllResponse {
    ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Object object = 2 [(gogoproto.nullable) = false];
}

message ReadRequest {
    RequestHeader header = 1 [(gogoproto.nullable) = false];
    atomix.primitive.meta.ObjectMeta meta = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    string key = 3;
}

message ReadResponse {
    ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Object object = 2;
}

message Object {
    atomix.primitive.meta.ObjectMeta meta = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    string key = 2;
    bytes value = 3;
}

message GossipMessage {
    oneof message {
        Initialize initialize = 1;
        Advertise advertise = 2;
        Update update = 3;
    }
}

message GossipHeader {
    atomix.primitive.meta.Timestamp timestamp = 1 [(gogoproto.nullable) = false];
}

message Initialize {
    RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message Advertise {
    GossipHeader header = 1 [(gogoproto.nullable) = false];
    atomix.primitive.meta.ObjectMeta meta = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    string key = 3;
}

message Update {
    GossipHeader header = 1 [(gogoproto.nullable) = false];
    Object object = 2 [(gogoproto.nullable) = false];
}

service GossipProtocol {
    rpc ReadAll (ReadAllRequest) returns (stream ReadAllResponse);
    rpc Read (ReadRequest) returns (ReadResponse);
    rpc Gossip (stream GossipMessage) returns (stream GossipMessage);
}
