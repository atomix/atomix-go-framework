/*
Copyright 2019-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.service;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";

message StateMachineSnapshot {
    uint64 index = 1 [(gogoproto.casttype) = "Index"];
    google.protobuf.Timestamp timestamp = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    repeated ServiceSnapshot services = 3;
}

// Service snapshot
message ServiceSnapshot {
    ServiceId service_id = 1 [(gogoproto.customname) = "ServiceID", (gogoproto.casttype) = "ServiceID", (gogoproto.nullable) = false];
    uint64 index = 2 [(gogoproto.casttype) = "Index"];
    repeated SessionSnapshot sessions = 3;
    bytes data = 4;
}

// Service session
message SessionSnapshot {
    uint64 session_id = 1 [(gogoproto.customname) = "SessionID", (gogoproto.casttype) = "SessionID"];
    google.protobuf.Timestamp timestamp = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    uint64 last_request_id = 3 [(gogoproto.customname) = "LastRequestID", (gogoproto.casttype) = "RequestID"];
    uint64 last_response_id = 4 [(gogoproto.customname) = "LastResponseID", (gogoproto.casttype) = "ResponseID"];
    repeated SessionWriteResponse pending_responses = 5;
    repeated SessionStreamSnapshot streams = 6;
}

// Service session stream
message SessionStreamSnapshot {
    uint64 stream_id = 1 [(gogoproto.customname) = "StreamID", (gogoproto.casttype) = "StreamID"];
    string operation_id = 3 [(gogoproto.customname) = "OperationID", (gogoproto.casttype) = "OperationID"];
}

message ServiceId {
    string type = 1;
    string cluster = 2;
    string name = 3;
}

message PartitionReadRequest {
    uint32 partition_id = 1 [(gogoproto.customname) = "PartitionID"];
    ServiceReadRequest request = 2 [(gogoproto.nullable) = false];
}

message PartitionReadResponse {
    PartitionResponseStatus status = 1 [(gogoproto.nullable) = false];
    ServiceReadResponse response = 2 [(gogoproto.nullable) = false];
}

message StateMachineReadRequest {
    ServiceReadRequest request = 1 [(gogoproto.nullable) = false];
}

message StateMachineReadResponse {
    ServiceReadResponse response = 1 [(gogoproto.nullable) = false];
}

message ServiceReadRequest {
    ServiceId service_id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "ServiceID", (gogoproto.casttype) = "ServiceID"];
    SessionReadRequest request = 2 [(gogoproto.nullable) = false];
}

message ServiceReadResponse {
    SessionReadResponse response = 1 [(gogoproto.nullable) = false];
}

message SessionReadRequest {
    uint64 session_id = 1 [(gogoproto.customname) = "SessionID", (gogoproto.casttype) = "SessionID"];
    uint64 last_request_id = 2 [(gogoproto.customname) = "LastRequestID", (gogoproto.casttype) = "RequestID"];
    uint64 last_index = 3 [(gogoproto.casttype) = "Index"];
    oneof request {
        QueryRequest query = 4;
    }
}

message SessionReadResponse {
    SessionResponseType type = 1;
    SessionResponseStatus status = 2 [(gogoproto.nullable) = false];
    uint64 index = 3 [(gogoproto.casttype) = "Index"];
    oneof response {
        QueryResponse query = 4;
    }
}

message PartitionWriteRequest {
    uint32 partition_id = 1 [(gogoproto.customname) = "PartitionID"];
    ServiceWriteRequest request = 2 [(gogoproto.nullable) = false];
}

message PartitionWriteResponse {
    PartitionResponseStatus status = 1 [(gogoproto.nullable) = false];
    ServiceWriteResponse response = 2 [(gogoproto.nullable) = false];
}

message PartitionResponseStatus {
    PartitionResponseCode code = 1;
    string leader = 2;
}

enum PartitionResponseCode {
    PARTITION_OK = 0;
    PARTITION_ERROR = 1;
    PARTITION_NOT_LEADER = 2;
}

message StateMachineWriteRequest {
    ServiceWriteRequest request = 1 [(gogoproto.nullable) = false];
    google.protobuf.Timestamp timestamp = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message StateMachineWriteResponse {
    ServiceWriteResponse response = 1 [(gogoproto.nullable) = false];
}

message ServiceWriteRequest {
    ServiceId service_id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "ServiceID", (gogoproto.casttype) = "ServiceID"];
    SessionWriteRequest request = 2 [(gogoproto.nullable) = false];
}

message ServiceWriteResponse {
    SessionWriteResponse response = 1 [(gogoproto.nullable) = false];
}

message SessionWriteRequest {
    uint64 session_id = 1 [(gogoproto.customname) = "SessionID", (gogoproto.casttype) = "SessionID"];
    uint64 request_id = 2 [(gogoproto.customname) = "RequestID", (gogoproto.casttype) = "RequestID"];
    oneof request {
        OpenSessionRequest open_session = 3;
        KeepAliveRequest keep_alive = 4;
        CloseSessionRequest close_session = 5;
        CommandRequest command = 6;
    }
}

message SessionWriteResponse {
    SessionResponseType type = 1;
    SessionResponseStatus status = 2 [(gogoproto.nullable) = false];
    uint64 request_id = 3 [(gogoproto.customname) = "RequestID", (gogoproto.casttype) = "RequestID"];
    uint64 response_id = 4 [(gogoproto.customname) = "ResponseID", (gogoproto.casttype) = "ResponseID"];
    oneof response {
        OpenSessionResponse open_session = 5;
        KeepAliveResponse keep_alive = 6;
        CloseSessionResponse close_session = 7;
        CommandResponse command = 8;
    }
}

message OpenSessionRequest {
    google.protobuf.Duration timeout = 1 [(gogoproto.stdduration) = true];
}

message OpenSessionResponse {

}

message KeepAliveRequest {
    uint64 ack_response_id = 1 [(gogoproto.customname) = "AckResponseID", (gogoproto.casttype) = "ResponseID"];
}

message KeepAliveResponse {

}

message CloseSessionRequest {

}

message CloseSessionResponse {

}

message CommandRequest {
    string operation_id = 1 [(gogoproto.customname) = "OperationID", (gogoproto.casttype) = "OperationID"];
    bytes value = 2;
}

message CommandResponse {
    bytes result = 1;
}

message QueryRequest {
    string operation_id = 1 [(gogoproto.customname) = "OperationID", (gogoproto.casttype) = "OperationID"];
    bytes value = 2;
}

message QueryResponse {
    bytes result = 1;
}

enum SessionResponseType {
    RESPONSE = 0;
    STREAM_OPEN = 1;
    STREAM_RESPONSE = 2;
    STREAM_CLOSE = 3;
}

message SessionResponseStatus {
    SessionResponseCode code = 1;
    string message = 2;
}

enum SessionResponseCode {
    OK = 0;
    ERROR = 1;
    UNKNOWN = 2;
    CANCELED = 3;
    NOT_FOUND = 4;
    ALREADY_EXISTS = 5;
    UNAUTHORIZED = 6;
    FORBIDDEN = 7;
    CONFLICT = 8;
    INVALID = 9;
    UNAVAILABLE = 10;
    NOT_SUPPORTED = 11;
    TIMEOUT = 12;
    INTERNAL = 13;
}

service PartitionService {
    rpc Read (PartitionReadRequest) returns (PartitionReadResponse);
    rpc ReadStream (PartitionReadRequest) returns (stream PartitionReadResponse);
    rpc WriteStream (stream PartitionWriteRequest) returns (stream PartitionWriteResponse);
}
