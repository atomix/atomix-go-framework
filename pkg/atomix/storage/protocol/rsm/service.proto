/*
Copyright 2019-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.service;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";

message StateMachineSnapshot {
    uint64 index = 1 [(gogoproto.casttype) = "Index"];
    google.protobuf.Timestamp timestamp = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    repeated SessionSnapshot sessions = 3;
    repeated ServiceSnapshot services = 4;
}

message SessionSnapshot {
    uint64 session_id = 1 [(gogoproto.customname) = "SessionID", (gogoproto.casttype) = "SessionID"];
    google.protobuf.Duration timeout = 2 [(gogoproto.stdduration) = true, (gogoproto.nullable) = false];
    google.protobuf.Timestamp last_updated = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message SessionCommandSnapshot {
    uint64 command_id = 1 [(gogoproto.customname) = "CommandID", (gogoproto.casttype) = "CommandID"];
    SessionCommandState state = 2;
    ServiceCommandRequest request = 3;
    repeated ServiceCommandResponse pending_responses = 4 [(gogoproto.nullable) = false];
}

enum SessionCommandState {
    COMMAND_OPEN = 0;
    COMMAND_COMPLETE = 1;
}

message ServiceSnapshot {
    uint64 service_id = 1 [(gogoproto.customname) = "ServiceID", (gogoproto.casttype) = "ServiceID"];
    ServiceInfo service_info = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
    bytes data = 3;
    repeated ServiceSessionSnapshot sessions = 4;
}

message ServiceSessionSnapshot {
    uint64 session_id = 1 [(gogoproto.customname) = "SessionID", (gogoproto.casttype) = "SessionID"];
    repeated SessionCommandSnapshot commands = 2;
}

message ServiceInfo {
    string type = 1 [(gogoproto.casttype) = "ServiceType"];
    string namespace = 2;
    string name = 3;
}

message PartitionConfigRequest {
    uint32 partition_id = 1 [(gogoproto.customname) = "PartitionID", (gogoproto.casttype) = "PartitionID"];
}

message PartitionConfigResponse {
    string leader = 1;
    repeated string followers = 2;
}

message PartitionCommandRequest {
    uint32 partition_id = 1 [(gogoproto.customname) = "PartitionID", (gogoproto.casttype) = "PartitionID"];
    CommandRequest request = 2 [(gogoproto.nullable) = false];
}

message PartitionCommandResponse {
    CommandResponse response = 1 [(gogoproto.nullable) = false];
}

message CommandRequest {
    google.protobuf.Timestamp timestamp = 1 [(gogoproto.stdtime) = true];
    oneof request {
        OpenSessionRequest open_session = 2;
        KeepAliveRequest keep_alive = 3;
        CloseSessionRequest close_session = 4;
        SessionCommandRequest session_command = 5;
    }
}

message CommandResponse {
    uint64 index = 1 [(gogoproto.casttype) = "Index"];
    oneof response {
        OpenSessionResponse open_session = 2;
        KeepAliveResponse keep_alive = 3;
        CloseSessionResponse close_session = 4;
        SessionCommandResponse session_command = 5;
    }
}

message OpenSessionRequest {
    google.protobuf.Duration timeout = 1 [(gogoproto.stdduration) = true, (gogoproto.nullable) = false];
}

message OpenSessionResponse {
    uint64 session_id = 1 [(gogoproto.customname) = "SessionID", (gogoproto.casttype) = "SessionID"];
}

message KeepAliveRequest {
    uint64 session_id = 1 [(gogoproto.customname) = "SessionID", (gogoproto.casttype) = "SessionID"];
    uint64 last_request_id = 2 [(gogoproto.customname) = "LastRequestID", (gogoproto.casttype) = "RequestID"];
    bytes request_filter = 3;
    bytes response_filter = 4;
}

message KeepAliveResponse {

}

message CloseSessionRequest {
    uint64 session_id = 1 [(gogoproto.customname) = "SessionID", (gogoproto.casttype) = "SessionID"];
}

message CloseSessionResponse {

}

message SessionCommandRequest {
    uint64 session_id = 1 [(gogoproto.customname) = "SessionID", (gogoproto.casttype) = "SessionID"];
    oneof request {
        CreateServiceRequest create_service = 2;
        CloseServiceRequest close_service = 3;
        ServiceCommandRequest service_command = 4;
    }
}

message SessionCommandResponse {
    oneof response {
        CreateServiceResponse create_service = 1;
        CloseServiceResponse close_service = 2;
        ServiceCommandResponse service_command = 3;
    }
}

message CreateServiceRequest {
    ServiceInfo info = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

message CreateServiceResponse {
    uint64 service_id = 1 [(gogoproto.customname) = "ServiceID", (gogoproto.casttype) = "ServiceID"];
}

message CloseServiceRequest {
    uint64 service_id = 1 [(gogoproto.customname) = "ServiceID", (gogoproto.casttype) = "ServiceID"];
}

message CloseServiceResponse {

}

message ServiceCommandRequest {
    uint64 service_id = 1 [(gogoproto.customname) = "ServiceID", (gogoproto.casttype) = "ServiceID"];
    uint64 request_id = 2 [(gogoproto.customname) = "RequestID", (gogoproto.casttype) = "RequestID"];
    OperationRequest operation = 3;
}

message ServiceCommandResponse {
    uint64 response_id = 1 [(gogoproto.customname) = "ResponseID", (gogoproto.casttype) = "ResponseID"];
    OperationResponse operation = 2;
}

message PartitionQueryRequest {
    uint32 partition_id = 1 [(gogoproto.customname) = "PartitionID", (gogoproto.casttype) = "PartitionID"];
    QueryRequest request = 2 [(gogoproto.nullable) = false];
    bool sync = 3;
}

message PartitionQueryResponse {
    QueryResponse response = 1 [(gogoproto.nullable) = false];
}

message QueryRequest {
    uint64 last_index = 1 [(gogoproto.casttype) = "Index"];
    oneof request {
        SessionQueryRequest session_query = 2;
    }
}

message QueryResponse {
    oneof response {
        SessionQueryResponse session_query = 1;
    }
}

message SessionQueryRequest {
    uint64 session_id = 1 [(gogoproto.customname) = "SessionID", (gogoproto.casttype) = "SessionID"];
    oneof request {
        ServiceQueryRequest service_query = 2;
    }
}

message SessionQueryResponse {
    oneof response {
        ServiceQueryResponse service_query = 2;
    }
}

message ServiceQueryRequest {
    uint64 service_id = 1 [(gogoproto.customname) = "ServiceID", (gogoproto.casttype) = "ServiceID"];
    OperationRequest operation = 2;
}

message ServiceQueryResponse {
    uint64 response_id = 1 [(gogoproto.customname) = "ResponseID", (gogoproto.casttype) = "ResponseID"];
    OperationResponse operation = 2;
}

message OperationRequest {
    uint32 operation_id = 1 [(gogoproto.customname) = "OperationID", (gogoproto.casttype) = "OperationID"];
    bytes value = 2;
}

message OperationResponse {
    ResponseStatus status = 1 [(gogoproto.nullable) = false];
    bytes value = 2;
}

message ResponseStatus {
    ResponseCode code = 1;
    string message = 2;
}

enum ResponseCode {
    OK = 0;
    ERROR = 1;
    UNKNOWN = 2;
    CANCELED = 3;
    NOT_FOUND = 4;
    ALREADY_EXISTS = 5;
    UNAUTHORIZED = 6;
    FORBIDDEN = 7;
    CONFLICT = 8;
    INVALID = 9;
    UNAVAILABLE = 10;
    NOT_SUPPORTED = 11;
    TIMEOUT = 12;
    INTERNAL = 13;
}

service PartitionService {
    rpc WatchConfig (PartitionConfigRequest) returns (stream PartitionConfigResponse);
    rpc Query (PartitionQueryRequest) returns (PartitionQueryResponse);
    rpc QueryStream (PartitionQueryRequest) returns (stream PartitionQueryResponse);
    rpc Command (PartitionCommandRequest) returns (PartitionCommandResponse);
    rpc CommandStream (PartitionCommandRequest) returns (stream PartitionCommandResponse);
}
