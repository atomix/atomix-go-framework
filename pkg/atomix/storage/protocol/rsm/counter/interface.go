// Code generated by atomix-go-framework. DO NOT EDIT.

// SPDX-FileCopyrightText: 2019-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

package counter

import (
	"fmt"
	counter "github.com/atomix/atomix-api/go/atomix/primitive/counter"
	rsm "github.com/atomix/atomix-go-framework/pkg/atomix/storage/protocol/rsm"
	util "github.com/atomix/atomix-go-framework/pkg/atomix/util"
	proto "github.com/golang/protobuf/proto"
	"io"
)

type Service interface {
	ServiceContext
	Backup(SnapshotWriter) error
	Restore(SnapshotReader) error
	// Set sets the counter value
	Set(SetProposal) (*counter.SetResponse, error)
	// Get gets the current counter value
	Get(GetQuery) (*counter.GetResponse, error)
	// Increment increments the counter value
	Increment(IncrementProposal) (*counter.IncrementResponse, error)
	// Decrement decrements the counter value
	Decrement(DecrementProposal) (*counter.DecrementResponse, error)
}

type ServiceContext interface {
	Scheduler() rsm.Scheduler
	Sessions() Sessions
	Proposals() Proposals
}

func newServiceContext(service rsm.ServiceContext) ServiceContext {
	return &serviceContext{
		scheduler: service.Scheduler(),
		sessions:  newSessions(service.Sessions()),
		proposals: newProposals(service.Commands()),
	}
}

type serviceContext struct {
	scheduler rsm.Scheduler
	sessions  Sessions
	proposals Proposals
}

func (s *serviceContext) Scheduler() rsm.Scheduler {
	return s.scheduler
}

func (s *serviceContext) Sessions() Sessions {
	return s.sessions
}

func (s *serviceContext) Proposals() Proposals {
	return s.proposals
}

var _ ServiceContext = &serviceContext{}

type SnapshotWriter interface {
	WriteState(*CounterState) error
}

func newSnapshotWriter(writer io.Writer) SnapshotWriter {
	return &serviceSnapshotWriter{
		writer: writer,
	}
}

type serviceSnapshotWriter struct {
	writer io.Writer
}

func (w *serviceSnapshotWriter) WriteState(state *CounterState) error {
	bytes, err := proto.Marshal(state)
	if err != nil {
		return err
	}
	err = util.WriteBytes(w.writer, bytes)
	if err != nil {
		return err
	}
	return err
}

var _ SnapshotWriter = &serviceSnapshotWriter{}

type SnapshotReader interface {
	ReadState() (*CounterState, error)
}

func newSnapshotReader(reader io.Reader) SnapshotReader {
	return &serviceSnapshotReader{
		reader: reader,
	}
}

type serviceSnapshotReader struct {
	reader io.Reader
}

func (r *serviceSnapshotReader) ReadState() (*CounterState, error) {
	bytes, err := util.ReadBytes(r.reader)
	if err != nil {
		return nil, err
	}
	state := &CounterState{}
	err = proto.Unmarshal(bytes, state)
	if err != nil {
		return nil, err
	}
	return state, nil
}

var _ SnapshotReader = &serviceSnapshotReader{}

type Sessions interface {
	Get(SessionID) (Session, bool)
	List() []Session
}

func newSessions(sessions rsm.Sessions) Sessions {
	return &serviceSessions{
		sessions: sessions,
	}
}

type serviceSessions struct {
	sessions rsm.Sessions
}

func (s *serviceSessions) Get(id SessionID) (Session, bool) {
	session, ok := s.sessions.Get(rsm.SessionID(id))
	if !ok {
		return nil, false
	}
	return newSession(session), true
}

func (s *serviceSessions) List() []Session {
	serviceSessions := s.sessions.List()
	sessions := make([]Session, len(serviceSessions))
	for i, serviceSession := range serviceSessions {
		sessions[i] = newSession(serviceSession)
	}
	return sessions
}

var _ Sessions = &serviceSessions{}

type SessionID uint64

type SessionState int

const (
	SessionClosed SessionState = iota
	SessionOpen
)

type Watcher interface {
	Cancel()
}

func newWatcher(watcher rsm.Watcher) Watcher {
	return &serviceWatcher{
		watcher: watcher,
	}
}

type serviceWatcher struct {
	watcher rsm.Watcher
}

func (s *serviceWatcher) Cancel() {
	s.watcher.Cancel()
}

var _ Watcher = &serviceWatcher{}

type Session interface {
	ID() SessionID
	State() SessionState
	Watch(func(SessionState)) Watcher
	Proposals() Proposals
}

func newSession(session rsm.Session) Session {
	return &serviceSession{
		session:   session,
		proposals: newProposals(session.Commands()),
	}
}

type serviceSession struct {
	session   rsm.Session
	proposals Proposals
}

func (s *serviceSession) ID() SessionID {
	return SessionID(s.session.ID())
}

func (s *serviceSession) Proposals() Proposals {
	return s.proposals
}

func (s *serviceSession) State() SessionState {
	return SessionState(s.session.State())
}

func (s *serviceSession) Watch(f func(SessionState)) Watcher {
	return newWatcher(s.session.Watch(func(state rsm.SessionState) {
		f(SessionState(state))
	}))
}

var _ Session = &serviceSession{}

type Proposals interface {
	Set() SetProposals
	Increment() IncrementProposals
	Decrement() DecrementProposals
}

func newProposals(commands rsm.Commands) Proposals {
	return &serviceProposals{
		setProposals:       newSetProposals(commands),
		incrementProposals: newIncrementProposals(commands),
		decrementProposals: newDecrementProposals(commands),
	}
}

type serviceProposals struct {
	setProposals       SetProposals
	incrementProposals IncrementProposals
	decrementProposals DecrementProposals
}

func (s *serviceProposals) Set() SetProposals {
	return s.setProposals
}
func (s *serviceProposals) Increment() IncrementProposals {
	return s.incrementProposals
}
func (s *serviceProposals) Decrement() DecrementProposals {
	return s.decrementProposals
}

var _ Proposals = &serviceProposals{}

type ProposalID uint64

type ProposalState int

const (
	ProposalComplete ProposalState = iota
	ProposalOpen
)

type Proposal interface {
	fmt.Stringer
	ID() ProposalID
	Session() Session
	State() ProposalState
	Watch(func(ProposalState)) Watcher
}

func newProposal(command rsm.Command) Proposal {
	return &serviceProposal{
		command: command,
	}
}

type serviceProposal struct {
	command rsm.Command
}

func (p *serviceProposal) ID() ProposalID {
	return ProposalID(p.command.ID())
}

func (p *serviceProposal) Session() Session {
	return newSession(p.command.Session())
}

func (p *serviceProposal) State() ProposalState {
	return ProposalState(p.command.State())
}

func (p *serviceProposal) Watch(f func(ProposalState)) Watcher {
	return newWatcher(p.command.Watch(func(state rsm.CommandState) {
		f(ProposalState(state))
	}))
}

func (p *serviceProposal) String() string {
	return fmt.Sprintf("ProposalID: %d, SessionID: %d", p.ID(), p.Session().ID())
}

var _ Proposal = &serviceProposal{}

type Query interface {
	fmt.Stringer
	Session() Session
}

func newQuery(query rsm.Query) Query {
	return &serviceQuery{
		query: query,
	}
}

type serviceQuery struct {
	query rsm.Query
}

func (p *serviceQuery) Session() Session {
	return newSession(p.query.Session())
}

func (p *serviceQuery) String() string {
	return fmt.Sprintf("SessionID: %d", p.Session().ID())
}

var _ Query = &serviceQuery{}

type SetProposals interface {
	Get(ProposalID) (SetProposal, bool)
	List() []SetProposal
}

func newSetProposals(commands rsm.Commands) SetProposals {
	return &setProposals{
		commands: commands,
	}
}

type setProposals struct {
	commands rsm.Commands
}

func (p *setProposals) Get(id ProposalID) (SetProposal, bool) {
	command, ok := p.commands.Get(rsm.CommandID(id))
	if !ok {
		return nil, false
	}
	proposal, err := newSetProposal(command)
	if err != nil {
		log.Error(err)
		return nil, false
	}
	return proposal, true
}

func (p *setProposals) List() []SetProposal {
	commands := p.commands.List(rsm.OperationID(1))
	proposals := make([]SetProposal, len(commands))
	for i, command := range commands {
		proposal, err := newSetProposal(command)
		if err != nil {
			log.Error(err)
		} else {
			proposals[i] = proposal
		}
	}
	return proposals
}

var _ SetProposals = &setProposals{}

type SetProposal interface {
	Proposal
	Request() *counter.SetRequest
}

func newSetProposal(command rsm.Command) (SetProposal, error) {
	request := &counter.SetRequest{}
	if err := proto.Unmarshal(command.Input(), request); err != nil {
		return nil, err
	}
	return &setProposal{
		Proposal: newProposal(command),
		command:  command,
		request:  request,
	}, nil
}

type setProposal struct {
	Proposal
	command rsm.Command
	request *counter.SetRequest
}

func (p *setProposal) Request() *counter.SetRequest {
	return p.request
}

func (p *setProposal) String() string {
	return fmt.Sprintf("ProposalID=%d, SessionID=%d", p.ID(), p.Session().ID())
}

var _ SetProposal = &setProposal{}

type GetQuery interface {
	Query
	Request() *counter.GetRequest
}

func newGetQuery(query rsm.Query) (GetQuery, error) {
	request := &counter.GetRequest{}
	if err := proto.Unmarshal(query.Input(), request); err != nil {
		return nil, err
	}
	return &getQuery{
		Query:   newQuery(query),
		query:   query,
		request: request,
	}, nil
}

type getQuery struct {
	Query
	query   rsm.Query
	request *counter.GetRequest
}

func (p *getQuery) Request() *counter.GetRequest {
	return p.request
}

func (p *getQuery) String() string {
	return fmt.Sprintf("SessionID=%d", p.Session().ID())
}

var _ GetQuery = &getQuery{}

type IncrementProposals interface {
	Get(ProposalID) (IncrementProposal, bool)
	List() []IncrementProposal
}

func newIncrementProposals(commands rsm.Commands) IncrementProposals {
	return &incrementProposals{
		commands: commands,
	}
}

type incrementProposals struct {
	commands rsm.Commands
}

func (p *incrementProposals) Get(id ProposalID) (IncrementProposal, bool) {
	command, ok := p.commands.Get(rsm.CommandID(id))
	if !ok {
		return nil, false
	}
	proposal, err := newIncrementProposal(command)
	if err != nil {
		log.Error(err)
		return nil, false
	}
	return proposal, true
}

func (p *incrementProposals) List() []IncrementProposal {
	commands := p.commands.List(rsm.OperationID(3))
	proposals := make([]IncrementProposal, len(commands))
	for i, command := range commands {
		proposal, err := newIncrementProposal(command)
		if err != nil {
			log.Error(err)
		} else {
			proposals[i] = proposal
		}
	}
	return proposals
}

var _ IncrementProposals = &incrementProposals{}

type IncrementProposal interface {
	Proposal
	Request() *counter.IncrementRequest
}

func newIncrementProposal(command rsm.Command) (IncrementProposal, error) {
	request := &counter.IncrementRequest{}
	if err := proto.Unmarshal(command.Input(), request); err != nil {
		return nil, err
	}
	return &incrementProposal{
		Proposal: newProposal(command),
		command:  command,
		request:  request,
	}, nil
}

type incrementProposal struct {
	Proposal
	command rsm.Command
	request *counter.IncrementRequest
}

func (p *incrementProposal) Request() *counter.IncrementRequest {
	return p.request
}

func (p *incrementProposal) String() string {
	return fmt.Sprintf("ProposalID=%d, SessionID=%d", p.ID(), p.Session().ID())
}

var _ IncrementProposal = &incrementProposal{}

type DecrementProposals interface {
	Get(ProposalID) (DecrementProposal, bool)
	List() []DecrementProposal
}

func newDecrementProposals(commands rsm.Commands) DecrementProposals {
	return &decrementProposals{
		commands: commands,
	}
}

type decrementProposals struct {
	commands rsm.Commands
}

func (p *decrementProposals) Get(id ProposalID) (DecrementProposal, bool) {
	command, ok := p.commands.Get(rsm.CommandID(id))
	if !ok {
		return nil, false
	}
	proposal, err := newDecrementProposal(command)
	if err != nil {
		log.Error(err)
		return nil, false
	}
	return proposal, true
}

func (p *decrementProposals) List() []DecrementProposal {
	commands := p.commands.List(rsm.OperationID(4))
	proposals := make([]DecrementProposal, len(commands))
	for i, command := range commands {
		proposal, err := newDecrementProposal(command)
		if err != nil {
			log.Error(err)
		} else {
			proposals[i] = proposal
		}
	}
	return proposals
}

var _ DecrementProposals = &decrementProposals{}

type DecrementProposal interface {
	Proposal
	Request() *counter.DecrementRequest
}

func newDecrementProposal(command rsm.Command) (DecrementProposal, error) {
	request := &counter.DecrementRequest{}
	if err := proto.Unmarshal(command.Input(), request); err != nil {
		return nil, err
	}
	return &decrementProposal{
		Proposal: newProposal(command),
		command:  command,
		request:  request,
	}, nil
}

type decrementProposal struct {
	Proposal
	command rsm.Command
	request *counter.DecrementRequest
}

func (p *decrementProposal) Request() *counter.DecrementRequest {
	return p.request
}

func (p *decrementProposal) String() string {
	return fmt.Sprintf("ProposalID=%d, SessionID=%d", p.ID(), p.Session().ID())
}

var _ DecrementProposal = &decrementProposal{}
