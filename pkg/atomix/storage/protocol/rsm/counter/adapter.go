// Code generated by atomix-go-framework. DO NOT EDIT.
package counter

import (
	counter "github.com/atomix/atomix-api/go/atomix/primitive/counter"
	"github.com/atomix/atomix-go-framework/pkg/atomix/errors"
	"github.com/atomix/atomix-go-framework/pkg/atomix/logging"
	"github.com/atomix/atomix-go-framework/pkg/atomix/storage/protocol/rsm"
	"github.com/golang/protobuf/proto"
	"io"
)

var log = logging.GetLogger("atomix", "counter", "service")

const Type = "Counter"

const (
	setOp       = "Set"
	getOp       = "Get"
	incrementOp = "Increment"
	decrementOp = "Decrement"
)

var newServiceFunc rsm.NewServiceFunc

func registerServiceFunc(rsmf NewServiceFunc) {
	newServiceFunc = func(scheduler rsm.Scheduler, context rsm.ServiceContext) rsm.Service {
		service := &ServiceAdaptor{
			Service: rsm.NewService(scheduler, context),
			rsm:     rsmf(newServiceContext(scheduler)),
		}
		service.init()
		return service
	}
}

type NewServiceFunc func(ServiceContext) Service

// RegisterService registers the election primitive service on the given node
func RegisterService(node *rsm.Node) {
	node.RegisterService(Type, newServiceFunc)
}

type ServiceAdaptor struct {
	rsm.Service
	rsm Service
}

func (s *ServiceAdaptor) init() {
	s.RegisterUnaryOperation(setOp, s.set)
	s.RegisterUnary(getOp, s.get)
	s.RegisterUnary(incrementOp, s.increment)
	s.RegisterUnary(decrementOp, s.decrement)
}
func (s *ServiceAdaptor) SessionOpen(rsmSession rsm.Session) {
	s.rsm.Sessions().open(newSession(rsmSession))
}

func (s *ServiceAdaptor) SessionExpired(session rsm.Session) {
	s.rsm.Sessions().expire(SessionID(session.ID()))
}

func (s *ServiceAdaptor) SessionClosed(session rsm.Session) {
	s.rsm.Sessions().close(SessionID(session.ID()))
}
func (s *ServiceAdaptor) Backup(writer io.Writer) error {
	err := s.rsm.Backup(newSnapshotWriter(writer))
	if err != nil {
		log.Error(err)
		return err
	}
	return nil
}

func (s *ServiceAdaptor) Restore(reader io.Reader) error {
	err := s.rsm.Restore(newSnapshotReader(reader))
	if err != nil {
		log.Error(err)
		return err
	}
	return nil
}
func (s *ServiceAdaptor) set(input []byte, rsmSession rsm.Session) ([]byte, error) {
	request := &counter.SetRequest{}
	err := proto.Unmarshal(input, request)
	if err != nil {
		log.Error(err)
		return nil, err
	}

	session, ok := s.rsm.Sessions().Get(SessionID(rsmSession.ID()))
	if !ok {
		err := errors.NewConflict("session %d not found", rsmSession.ID())
		log.Warn(err)
		return nil, err
	}

	proposal := newSetProposal(ProposalID(s.Index()), session, request)

	s.rsm.Proposals().Set().register(proposal)
	session.Proposals().Set().register(proposal)

	defer func() {
		session.Proposals().Set().unregister(proposal.ID())
		s.rsm.Proposals().Set().unregister(proposal.ID())
	}()

	log.Debugf("Proposing SetProposal %s", proposal)
	err = s.rsm.Set(proposal)
	if err != nil {
		log.Warn(err)
		return nil, err
	}

	output, err := proto.Marshal(proposal.response())
	if err != nil {
		log.Error(err)
		return nil, err
	}
	return output, nil
}
func (s *ServiceAdaptor) get(input []byte, rsmSession rsm.Session) ([]byte, error) {
	request := &counter.GetRequest{}
	err := proto.Unmarshal(input, request)
	if err != nil {
		log.Error(err)
		return nil, err
	}

	session, ok := s.rsm.Sessions().Get(SessionID(rsmSession.ID()))
	if !ok {
		err := errors.NewConflict("session %d not found", rsmSession.ID())
		log.Warn(err)
		return nil, err
	}

	proposal := newGetProposal(ProposalID(s.Index()), session, request)

	s.rsm.Proposals().Get().register(proposal)
	session.Proposals().Get().register(proposal)

	defer func() {
		session.Proposals().Get().unregister(proposal.ID())
		s.rsm.Proposals().Get().unregister(proposal.ID())
	}()

	log.Debugf("Proposing GetProposal %s", proposal)
	err = s.rsm.Get(proposal)
	if err != nil {
		log.Warn(err)
		return nil, err
	}

	output, err := proto.Marshal(proposal.response())
	if err != nil {
		log.Error(err)
		return nil, err
	}
	return output, nil
}
func (s *ServiceAdaptor) increment(input []byte, rsmSession rsm.Session) ([]byte, error) {
	request := &counter.IncrementRequest{}
	err := proto.Unmarshal(input, request)
	if err != nil {
		log.Error(err)
		return nil, err
	}

	session, ok := s.rsm.Sessions().Get(SessionID(rsmSession.ID()))
	if !ok {
		err := errors.NewConflict("session %d not found", rsmSession.ID())
		log.Warn(err)
		return nil, err
	}

	proposal := newIncrementProposal(ProposalID(s.Index()), session, request)

	s.rsm.Proposals().Increment().register(proposal)
	session.Proposals().Increment().register(proposal)

	defer func() {
		session.Proposals().Increment().unregister(proposal.ID())
		s.rsm.Proposals().Increment().unregister(proposal.ID())
	}()

	log.Debugf("Proposing IncrementProposal %s", proposal)
	err = s.rsm.Increment(proposal)
	if err != nil {
		log.Warn(err)
		return nil, err
	}

	output, err := proto.Marshal(proposal.response())
	if err != nil {
		log.Error(err)
		return nil, err
	}
	return output, nil
}
func (s *ServiceAdaptor) decrement(input []byte, rsmSession rsm.Session) ([]byte, error) {
	request := &counter.DecrementRequest{}
	err := proto.Unmarshal(input, request)
	if err != nil {
		log.Error(err)
		return nil, err
	}

	session, ok := s.rsm.Sessions().Get(SessionID(rsmSession.ID()))
	if !ok {
		err := errors.NewConflict("session %d not found", rsmSession.ID())
		log.Warn(err)
		return nil, err
	}

	proposal := newDecrementProposal(ProposalID(s.Index()), session, request)

	s.rsm.Proposals().Decrement().register(proposal)
	session.Proposals().Decrement().register(proposal)

	defer func() {
		session.Proposals().Decrement().unregister(proposal.ID())
		s.rsm.Proposals().Decrement().unregister(proposal.ID())
	}()

	log.Debugf("Proposing DecrementProposal %s", proposal)
	err = s.rsm.Decrement(proposal)
	if err != nil {
		log.Warn(err)
		return nil, err
	}

	output, err := proto.Marshal(proposal.response())
	if err != nil {
		log.Error(err)
		return nil, err
	}
	return output, nil
}

var _ rsm.Service = &ServiceAdaptor{}
