// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/storage/protocol/rsm/map/state.proto

package _map

import (
	fmt "fmt"
	meta "github.com/atomix/atomix-api/go/atomix/primitive/meta"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MapState struct {
	Listeners []MapStateListener `protobuf:"bytes,1,rep,name=listeners,proto3" json:"listeners"`
	Entries   []MapStateEntry    `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries"`
}

func (m *MapState) Reset()         { *m = MapState{} }
func (m *MapState) String() string { return proto.CompactTextString(m) }
func (*MapState) ProtoMessage()    {}
func (*MapState) Descriptor() ([]byte, []int) {
	return fileDescriptor_54924d05987da350, []int{0}
}
func (m *MapState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapState.Merge(m, src)
}
func (m *MapState) XXX_Size() int {
	return m.Size()
}
func (m *MapState) XXX_DiscardUnknown() {
	xxx_messageInfo_MapState.DiscardUnknown(m)
}

var xxx_messageInfo_MapState proto.InternalMessageInfo

func (m *MapState) GetListeners() []MapStateListener {
	if m != nil {
		return m.Listeners
	}
	return nil
}

func (m *MapState) GetEntries() []MapStateEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type MapStateListener struct {
	ProposalID ProposalID `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3,casttype=ProposalID" json:"proposal_id,omitempty"`
	Key        string     `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *MapStateListener) Reset()         { *m = MapStateListener{} }
func (m *MapStateListener) String() string { return proto.CompactTextString(m) }
func (*MapStateListener) ProtoMessage()    {}
func (*MapStateListener) Descriptor() ([]byte, []int) {
	return fileDescriptor_54924d05987da350, []int{1}
}
func (m *MapStateListener) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapStateListener) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapStateListener.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapStateListener) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapStateListener.Merge(m, src)
}
func (m *MapStateListener) XXX_Size() int {
	return m.Size()
}
func (m *MapStateListener) XXX_DiscardUnknown() {
	xxx_messageInfo_MapStateListener.DiscardUnknown(m)
}

var xxx_messageInfo_MapStateListener proto.InternalMessageInfo

func (m *MapStateListener) GetProposalID() ProposalID {
	if m != nil {
		return m.ProposalID
	}
	return 0
}

func (m *MapStateListener) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type MapStateEntry struct {
	Key   MapStateKey    `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	Value *MapStateValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MapStateEntry) Reset()         { *m = MapStateEntry{} }
func (m *MapStateEntry) String() string { return proto.CompactTextString(m) }
func (*MapStateEntry) ProtoMessage()    {}
func (*MapStateEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_54924d05987da350, []int{2}
}
func (m *MapStateEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapStateEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapStateEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapStateEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapStateEntry.Merge(m, src)
}
func (m *MapStateEntry) XXX_Size() int {
	return m.Size()
}
func (m *MapStateEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MapStateEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MapStateEntry proto.InternalMessageInfo

func (m *MapStateEntry) GetKey() MapStateKey {
	if m != nil {
		return m.Key
	}
	return MapStateKey{}
}

func (m *MapStateEntry) GetValue() *MapStateValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type MapStateKey struct {
	meta.ObjectMeta `protobuf:"bytes,1,opt,name=meta,proto3,embedded=meta" json:"meta"`
	Key             string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *MapStateKey) Reset()         { *m = MapStateKey{} }
func (m *MapStateKey) String() string { return proto.CompactTextString(m) }
func (*MapStateKey) ProtoMessage()    {}
func (*MapStateKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_54924d05987da350, []int{3}
}
func (m *MapStateKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapStateKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapStateKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapStateKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapStateKey.Merge(m, src)
}
func (m *MapStateKey) XXX_Size() int {
	return m.Size()
}
func (m *MapStateKey) XXX_DiscardUnknown() {
	xxx_messageInfo_MapStateKey.DiscardUnknown(m)
}

var xxx_messageInfo_MapStateKey proto.InternalMessageInfo

func (m *MapStateKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type MapStateValue struct {
	Value  []byte     `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Expire *time.Time `protobuf:"bytes,2,opt,name=expire,proto3,stdtime" json:"expire,omitempty"`
}

func (m *MapStateValue) Reset()         { *m = MapStateValue{} }
func (m *MapStateValue) String() string { return proto.CompactTextString(m) }
func (*MapStateValue) ProtoMessage()    {}
func (*MapStateValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_54924d05987da350, []int{4}
}
func (m *MapStateValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapStateValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapStateValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapStateValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapStateValue.Merge(m, src)
}
func (m *MapStateValue) XXX_Size() int {
	return m.Size()
}
func (m *MapStateValue) XXX_DiscardUnknown() {
	xxx_messageInfo_MapStateValue.DiscardUnknown(m)
}

var xxx_messageInfo_MapStateValue proto.InternalMessageInfo

func (m *MapStateValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *MapStateValue) GetExpire() *time.Time {
	if m != nil {
		return m.Expire
	}
	return nil
}

func init() {
	proto.RegisterType((*MapState)(nil), "atomix.storage.protocol.rsm.map.MapState")
	proto.RegisterType((*MapStateListener)(nil), "atomix.storage.protocol.rsm.map.MapStateListener")
	proto.RegisterType((*MapStateEntry)(nil), "atomix.storage.protocol.rsm.map.MapStateEntry")
	proto.RegisterType((*MapStateKey)(nil), "atomix.storage.protocol.rsm.map.MapStateKey")
	proto.RegisterType((*MapStateValue)(nil), "atomix.storage.protocol.rsm.map.MapStateValue")
}

func init() {
	proto.RegisterFile("atomix/storage/protocol/rsm/map/state.proto", fileDescriptor_54924d05987da350)
}

var fileDescriptor_54924d05987da350 = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcd, 0x6e, 0xd4, 0x30,
	0x18, 0x5c, 0xb7, 0xa1, 0xb4, 0x0e, 0x48, 0x95, 0xd5, 0x43, 0xb4, 0x42, 0xc9, 0x92, 0xd3, 0x4a,
	0x20, 0x5b, 0x94, 0x0b, 0x17, 0x84, 0x14, 0x2d, 0x87, 0x0a, 0x0a, 0x28, 0xfc, 0x5c, 0x8b, 0x77,
	0x6b, 0x22, 0x43, 0xbc, 0xb6, 0x6c, 0xb7, 0x6a, 0xdf, 0xa2, 0x77, 0x9e, 0x82, 0xb7, 0xe8, 0x71,
	0x8f, 0x9c, 0x16, 0x94, 0x7d, 0x0b, 0x4e, 0xc8, 0x8e, 0x4d, 0x29, 0x42, 0x62, 0xb9, 0x7d, 0xf9,
	0x32, 0x33, 0xdf, 0x4c, 0x32, 0xf0, 0x1e, 0xb5, 0x52, 0xf0, 0x33, 0x62, 0xac, 0xd4, 0xb4, 0x61,
	0x44, 0x69, 0x69, 0xe5, 0x4c, 0xb6, 0x44, 0x1b, 0x41, 0x04, 0x55, 0xc4, 0x58, 0x6a, 0x19, 0xf6,
	0x6b, 0x54, 0xf4, 0x60, 0x1c, 0xc0, 0x38, 0x82, 0xb1, 0x36, 0x02, 0x0b, 0xaa, 0x86, 0x45, 0x23,
	0x65, 0xd3, 0x06, 0x95, 0xe9, 0xc9, 0x07, 0x62, 0xb9, 0x60, 0xc6, 0x52, 0xa1, 0x7a, 0xec, 0xb0,
	0x0c, 0xe7, 0x94, 0xe6, 0x82, 0x5b, 0x7e, 0xca, 0x88, 0x60, 0x96, 0x12, 0x39, 0xfd, 0xc8, 0x66,
	0x36, 0x60, 0xf6, 0x1a, 0xd9, 0x48, 0x3f, 0x12, 0x37, 0xf5, 0xdb, 0xf2, 0x0b, 0x80, 0xdb, 0x87,
	0x54, 0xbd, 0x76, 0x76, 0xd0, 0x5b, 0xb8, 0xd3, 0x72, 0x63, 0xd9, 0x9c, 0x69, 0x93, 0x81, 0xd1,
	0xe6, 0x38, 0xdd, 0x7f, 0x80, 0xff, 0x61, 0x0e, 0x47, 0xf6, 0xf3, 0xc0, 0xac, 0x92, 0xcb, 0x65,
	0x31, 0xa8, 0xaf, 0x94, 0xd0, 0x0b, 0x78, 0x93, 0xcd, 0xad, 0xe6, 0xcc, 0x64, 0x1b, 0x5e, 0x14,
	0xaf, 0x2d, 0xfa, 0x74, 0x6e, 0xf5, 0x79, 0x50, 0x8c, 0x22, 0xe5, 0x0c, 0xee, 0xfe, 0x79, 0x14,
	0x3d, 0x86, 0xa9, 0xd2, 0x52, 0x49, 0x43, 0xdb, 0x23, 0x7e, 0x9c, 0x81, 0x11, 0x18, 0x27, 0xd5,
	0x9d, 0x6e, 0x59, 0xc0, 0x57, 0x61, 0x7d, 0x30, 0xf9, 0x71, 0xed, 0xa9, 0x86, 0x91, 0x70, 0x70,
	0x8c, 0x76, 0xe1, 0xe6, 0x27, 0x76, 0x9e, 0x6d, 0x8c, 0xc0, 0x78, 0xa7, 0x76, 0x63, 0xf9, 0x19,
	0xc0, 0xdb, 0xd7, 0x5c, 0xa0, 0x49, 0x8f, 0x71, 0xd2, 0xe9, 0xfe, 0xfd, 0xb5, 0x23, 0x3c, 0x63,
	0x31, 0x80, 0xa3, 0xa3, 0x09, 0xbc, 0x71, 0x4a, 0xdb, 0x13, 0xe6, 0x6f, 0xfd, 0xcf, 0xa7, 0x78,
	0xe7, 0x58, 0x75, 0x4f, 0x2e, 0xdf, 0xc3, 0xf4, 0x37, 0x7d, 0xf4, 0x04, 0x26, 0xee, 0x87, 0x07,
	0x6f, 0x77, 0xa3, 0xe6, 0xaf, 0x3a, 0x60, 0xf7, 0x16, 0xbf, 0xf4, 0x75, 0x38, 0x64, 0x96, 0x56,
	0xdb, 0xce, 0xd0, 0x62, 0x59, 0x80, 0xda, 0x13, 0xff, 0x92, 0xff, 0xe8, 0x2a, 0xbe, 0xbf, 0x8c,
	0xf6, 0xa2, 0x71, 0x77, 0xe4, 0x56, 0x30, 0x82, 0x1e, 0xc1, 0x2d, 0x76, 0xa6, 0xb8, 0x8e, 0x79,
	0x86, 0xb8, 0xef, 0x2a, 0x8e, 0x5d, 0xc5, 0x6f, 0x62, 0x57, 0xab, 0xe4, 0xe2, 0x5b, 0x01, 0xea,
	0x80, 0xaf, 0xb2, 0xcb, 0x2e, 0x07, 0x8b, 0x2e, 0x07, 0xdf, 0xbb, 0x1c, 0x5c, 0xac, 0xf2, 0xc1,
	0x62, 0x95, 0x0f, 0xbe, 0xae, 0xf2, 0xc1, 0x74, 0xcb, 0x73, 0x1f, 0xfe, 0x0c, 0x00, 0x00, 0xff,
	0xff, 0xa4, 0x7b, 0xc9, 0x15, 0x45, 0x03, 0x00, 0x00,
}

func (m *MapState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintState(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Listeners) > 0 {
		for iNdEx := len(m.Listeners) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Listeners[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintState(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MapStateListener) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapStateListener) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapStateListener) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintState(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalID != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.ProposalID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapStateEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapStateEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapStateEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintState(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MapStateKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapStateKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapStateKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintState(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MapStateValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapStateValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapStateValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expire != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Expire, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Expire):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintState(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintState(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintState(dAtA []byte, offset int, v uint64) int {
	offset -= sovState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MapState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Listeners) > 0 {
		for _, e := range m.Listeners {
			l = e.Size()
			n += 1 + l + sovState(uint64(l))
		}
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovState(uint64(l))
		}
	}
	return n
}

func (m *MapStateListener) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalID != 0 {
		n += 1 + sovState(uint64(m.ProposalID))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	return n
}

func (m *MapStateEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovState(uint64(l))
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovState(uint64(l))
	}
	return n
}

func (m *MapStateKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovState(uint64(l))
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	return n
}

func (m *MapStateValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	if m.Expire != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Expire)
		n += 1 + l + sovState(uint64(l))
	}
	return n
}

func sovState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozState(x uint64) (n int) {
	return sovState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MapState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listeners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Listeners = append(m.Listeners, MapStateListener{})
			if err := m.Listeners[len(m.Listeners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, MapStateEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapStateListener) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapStateListener: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapStateListener: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalID", wireType)
			}
			m.ProposalID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalID |= ProposalID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapStateEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapStateEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapStateEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &MapStateValue{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapStateKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapStateKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapStateKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapStateValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapStateValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapStateValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expire == nil {
				m.Expire = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Expire, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupState = fmt.Errorf("proto: unexpected end of group")
)
