// Code generated by atomix-go-framework. DO NOT EDIT.
package indexedmap

import (
	"fmt"
	indexedmap "github.com/atomix/atomix-api/go/atomix/primitive/indexedmap"
	errors "github.com/atomix/atomix-go-framework/pkg/atomix/errors"
	rsm "github.com/atomix/atomix-go-framework/pkg/atomix/storage/protocol/rsm"
	util "github.com/atomix/atomix-go-framework/pkg/atomix/util"
	proto "github.com/golang/protobuf/proto"
	"io"
)

type Service interface {
	ServiceContext
	Backup(SnapshotWriter) error
	Restore(SnapshotReader) error
	// Size returns the size of the map
	Size(SizeQuery) error
	// Put puts an entry into the map
	Put(PutProposal) error
	// Get gets the entry for a key
	Get(GetQuery) error
	// FirstEntry gets the first entry in the map
	FirstEntry(FirstEntryQuery) error
	// LastEntry gets the last entry in the map
	LastEntry(LastEntryQuery) error
	// PrevEntry gets the previous entry in the map
	PrevEntry(PrevEntryQuery) error
	// NextEntry gets the next entry in the map
	NextEntry(NextEntryQuery) error
	// Remove removes an entry from the map
	Remove(RemoveProposal) error
	// Clear removes all entries from the map
	Clear(ClearProposal) error
	// Events listens for change events
	Events(EventsProposal) error
	// Entries lists all entries in the map
	Entries(EntriesQuery) error
}

type ServiceContext interface {
	Scheduler() rsm.Scheduler
	Sessions() Sessions
	Proposals() Proposals
}

func newServiceContext(service rsm.ServiceContext) ServiceContext {
	return &serviceContext{
		scheduler: service.Scheduler(),
		sessions:  newSessions(service.Sessions()),
		proposals: newProposals(service.Commands()),
	}
}

type serviceContext struct {
	scheduler rsm.Scheduler
	sessions  Sessions
	proposals Proposals
}

func (s *serviceContext) Scheduler() rsm.Scheduler {
	return s.scheduler
}

func (s *serviceContext) Sessions() Sessions {
	return s.sessions
}

func (s *serviceContext) Proposals() Proposals {
	return s.proposals
}

var _ ServiceContext = &serviceContext{}

type SnapshotWriter interface {
	WriteState(*IndexedMapState) error
}

func newSnapshotWriter(writer io.Writer) SnapshotWriter {
	return &serviceSnapshotWriter{
		writer: writer,
	}
}

type serviceSnapshotWriter struct {
	writer io.Writer
}

func (w *serviceSnapshotWriter) WriteState(state *IndexedMapState) error {
	bytes, err := proto.Marshal(state)
	if err != nil {
		return err
	}
	err = util.WriteBytes(w.writer, bytes)
	if err != nil {
		return err
	}
	return err
}

var _ SnapshotWriter = &serviceSnapshotWriter{}

type SnapshotReader interface {
	ReadState() (*IndexedMapState, error)
}

func newSnapshotReader(reader io.Reader) SnapshotReader {
	return &serviceSnapshotReader{
		reader: reader,
	}
}

type serviceSnapshotReader struct {
	reader io.Reader
}

func (r *serviceSnapshotReader) ReadState() (*IndexedMapState, error) {
	bytes, err := util.ReadBytes(r.reader)
	if err != nil {
		return nil, err
	}
	state := &IndexedMapState{}
	err = proto.Unmarshal(bytes, state)
	if err != nil {
		return nil, err
	}
	return state, nil
}

var _ SnapshotReader = &serviceSnapshotReader{}

type Sessions interface {
	Get(SessionID) (Session, bool)
	List() []Session
}

func newSessions(sessions rsm.Sessions) Sessions {
	return &serviceSessions{
		sessions: sessions,
	}
}

type serviceSessions struct {
	sessions rsm.Sessions
}

func (s *serviceSessions) Get(id SessionID) (Session, bool) {
	session, ok := s.sessions.Get(rsm.SessionID(id))
	if !ok {
		return nil, false
	}
	return newSession(session), true
}

func (s *serviceSessions) List() []Session {
	serviceSessions := s.sessions.List()
	sessions := make([]Session, len(serviceSessions))
	for i, serviceSession := range serviceSessions {
		sessions[i] = newSession(serviceSession)
	}
	return sessions
}

var _ Sessions = &serviceSessions{}

type SessionID uint64

type SessionState int

const (
	SessionClosed SessionState = iota
	SessionOpen
)

type Watcher interface {
	Cancel()
}

func newWatcher(watcher rsm.Watcher) Watcher {
	return &serviceWatcher{
		watcher: watcher,
	}
}

type serviceWatcher struct {
	watcher rsm.Watcher
}

func (s *serviceWatcher) Cancel() {
	s.watcher.Cancel()
}

var _ Watcher = &serviceWatcher{}

type Session interface {
	ID() SessionID
	State() SessionState
	Watch(func(SessionState)) Watcher
	Proposals() Proposals
}

func newSession(session rsm.Session) Session {
	return &serviceSession{
		session:   session,
		proposals: newProposals(session.Commands()),
	}
}

type serviceSession struct {
	session   rsm.Session
	proposals Proposals
}

func (s *serviceSession) ID() SessionID {
	return SessionID(s.session.ID())
}

func (s *serviceSession) Proposals() Proposals {
	return s.proposals
}

func (s *serviceSession) State() SessionState {
	return SessionState(s.session.State())
}

func (s *serviceSession) Watch(f func(SessionState)) Watcher {
	return newWatcher(s.session.Watch(func(state rsm.SessionState) {
		f(SessionState(state))
	}))
}

var _ Session = &serviceSession{}

type Proposals interface {
	Put() PutProposals
	Remove() RemoveProposals
	Clear() ClearProposals
	Events() EventsProposals
}

func newProposals(commands rsm.Commands) Proposals {
	return &serviceProposals{
		putProposals:    newPutProposals(commands),
		removeProposals: newRemoveProposals(commands),
		clearProposals:  newClearProposals(commands),
		eventsProposals: newEventsProposals(commands),
	}
}

type serviceProposals struct {
	putProposals    PutProposals
	removeProposals RemoveProposals
	clearProposals  ClearProposals
	eventsProposals EventsProposals
}

func (s *serviceProposals) Put() PutProposals {
	return s.putProposals
}
func (s *serviceProposals) Remove() RemoveProposals {
	return s.removeProposals
}
func (s *serviceProposals) Clear() ClearProposals {
	return s.clearProposals
}
func (s *serviceProposals) Events() EventsProposals {
	return s.eventsProposals
}

var _ Proposals = &serviceProposals{}

type ProposalID uint64

type Proposal interface {
	fmt.Stringer
	ID() ProposalID
	Session() Session
}

func newProposal(command rsm.Command) Proposal {
	return &serviceProposal{
		command: command,
	}
}

type serviceProposal struct {
	command rsm.Command
}

func (p *serviceProposal) ID() ProposalID {
	return ProposalID(p.command.ID())
}

func (p *serviceProposal) Session() Session {
	return newSession(p.command.Session())
}

func (p *serviceProposal) String() string {
	return fmt.Sprintf("ProposalID: %d, SessionID: %d", p.ID(), p.Session().ID())
}

var _ Proposal = &serviceProposal{}

type Query interface {
	fmt.Stringer
	Session() Session
}

func newQuery(query rsm.Query) Query {
	return &serviceQuery{
		query: query,
	}
}

type serviceQuery struct {
	query rsm.Query
}

func (p *serviceQuery) Session() Session {
	return newSession(p.query.Session())
}

func (p *serviceQuery) String() string {
	return fmt.Sprintf("SessionID: %d", p.Session().ID())
}

var _ Query = &serviceQuery{}

type SizeQuery interface {
	Query
	Request() (*indexedmap.SizeRequest, error)
	Reply(*indexedmap.SizeResponse) error
}

func newSizeQuery(query rsm.Query) SizeQuery {
	return &sizeQuery{
		Query: newQuery(query),
		query: query,
	}
}

type sizeQuery struct {
	Query
	query rsm.Query
}

func (p *sizeQuery) Request() (*indexedmap.SizeRequest, error) {
	request := &indexedmap.SizeRequest{}
	if err := proto.Unmarshal(p.query.Input(), request); err != nil {
		return nil, err
	}
	log.Debugf("Received SizeQuery %s: %s", p, request)
	return request, nil
}

func (p *sizeQuery) Reply(response *indexedmap.SizeResponse) error {
	log.Debugf("Sending SizeQuery %s: %s", p, response)
	output, err := proto.Marshal(response)
	if err != nil {
		return err
	}
	p.query.Output(output, nil)
	p.query.Close()
	return nil
}

func (p *sizeQuery) String() string {
	return fmt.Sprintf("SessionID=%d", p.Session().ID())
}

var _ SizeQuery = &sizeQuery{}

type PutProposals interface {
	Get(ProposalID) (PutProposal, bool)
	List() []PutProposal
}

func newPutProposals(commands rsm.Commands) PutProposals {
	return &putProposals{
		commands: commands,
	}
}

type putProposals struct {
	commands rsm.Commands
}

func (p *putProposals) Get(id ProposalID) (PutProposal, bool) {
	command, ok := p.commands.Get(rsm.CommandID(id))
	if !ok {
		return nil, false
	}
	return newPutProposal(command), true
}

func (p *putProposals) List() []PutProposal {
	commands := p.commands.List(rsm.OperationID(2))
	proposals := make([]PutProposal, len(commands))
	for i, command := range commands {
		proposals[i] = newPutProposal(command)
	}
	return proposals
}

var _ PutProposals = &putProposals{}

type PutProposal interface {
	Proposal
	Request() (*indexedmap.PutRequest, error)
	Reply(*indexedmap.PutResponse) error
	Fail(error) error
}

func newPutProposal(command rsm.Command) PutProposal {
	return &putProposal{
		Proposal: newProposal(command),
		command:  command,
	}
}

type putProposal struct {
	Proposal
	command  rsm.Command
	complete bool
}

func (p *putProposal) Request() (*indexedmap.PutRequest, error) {
	request := &indexedmap.PutRequest{}
	if err := proto.Unmarshal(p.command.Input(), request); err != nil {
		return nil, err
	}
	log.Debugf("Received PutProposal %s: %s", p, request)
	return request, nil
}

func (p *putProposal) Reply(response *indexedmap.PutResponse) error {
	if p.complete {
		return errors.NewConflict("proposal is already complete")
	}
	log.Debugf("Sending PutProposal %s: %s", p, response)
	output, err := proto.Marshal(response)
	if err != nil {
		return err
	}
	p.command.Output(output, nil)
	p.command.Close()
	p.complete = true
	return nil
}

func (p *putProposal) Fail(err error) error {
	if p.complete {
		return errors.NewConflict("proposal is already complete")
	}
	log.Debugf("Failing PutProposal %s: %s", p, err)
	p.command.Output(nil, err)
	p.command.Close()
	p.complete = true
	return nil
}

func (p *putProposal) String() string {
	return fmt.Sprintf("ProposalID=%d, SessionID=%d", p.ID(), p.Session().ID())
}

var _ PutProposal = &putProposal{}

type GetQuery interface {
	Query
	Request() (*indexedmap.GetRequest, error)
	Reply(*indexedmap.GetResponse) error
}

func newGetQuery(query rsm.Query) GetQuery {
	return &getQuery{
		Query: newQuery(query),
		query: query,
	}
}

type getQuery struct {
	Query
	query rsm.Query
}

func (p *getQuery) Request() (*indexedmap.GetRequest, error) {
	request := &indexedmap.GetRequest{}
	if err := proto.Unmarshal(p.query.Input(), request); err != nil {
		return nil, err
	}
	log.Debugf("Received GetQuery %s: %s", p, request)
	return request, nil
}

func (p *getQuery) Reply(response *indexedmap.GetResponse) error {
	log.Debugf("Sending GetQuery %s: %s", p, response)
	output, err := proto.Marshal(response)
	if err != nil {
		return err
	}
	p.query.Output(output, nil)
	p.query.Close()
	return nil
}

func (p *getQuery) String() string {
	return fmt.Sprintf("SessionID=%d", p.Session().ID())
}

var _ GetQuery = &getQuery{}

type FirstEntryQuery interface {
	Query
	Request() (*indexedmap.FirstEntryRequest, error)
	Reply(*indexedmap.FirstEntryResponse) error
}

func newFirstEntryQuery(query rsm.Query) FirstEntryQuery {
	return &firstEntryQuery{
		Query: newQuery(query),
		query: query,
	}
}

type firstEntryQuery struct {
	Query
	query rsm.Query
}

func (p *firstEntryQuery) Request() (*indexedmap.FirstEntryRequest, error) {
	request := &indexedmap.FirstEntryRequest{}
	if err := proto.Unmarshal(p.query.Input(), request); err != nil {
		return nil, err
	}
	log.Debugf("Received FirstEntryQuery %s: %s", p, request)
	return request, nil
}

func (p *firstEntryQuery) Reply(response *indexedmap.FirstEntryResponse) error {
	log.Debugf("Sending FirstEntryQuery %s: %s", p, response)
	output, err := proto.Marshal(response)
	if err != nil {
		return err
	}
	p.query.Output(output, nil)
	p.query.Close()
	return nil
}

func (p *firstEntryQuery) String() string {
	return fmt.Sprintf("SessionID=%d", p.Session().ID())
}

var _ FirstEntryQuery = &firstEntryQuery{}

type LastEntryQuery interface {
	Query
	Request() (*indexedmap.LastEntryRequest, error)
	Reply(*indexedmap.LastEntryResponse) error
}

func newLastEntryQuery(query rsm.Query) LastEntryQuery {
	return &lastEntryQuery{
		Query: newQuery(query),
		query: query,
	}
}

type lastEntryQuery struct {
	Query
	query rsm.Query
}

func (p *lastEntryQuery) Request() (*indexedmap.LastEntryRequest, error) {
	request := &indexedmap.LastEntryRequest{}
	if err := proto.Unmarshal(p.query.Input(), request); err != nil {
		return nil, err
	}
	log.Debugf("Received LastEntryQuery %s: %s", p, request)
	return request, nil
}

func (p *lastEntryQuery) Reply(response *indexedmap.LastEntryResponse) error {
	log.Debugf("Sending LastEntryQuery %s: %s", p, response)
	output, err := proto.Marshal(response)
	if err != nil {
		return err
	}
	p.query.Output(output, nil)
	p.query.Close()
	return nil
}

func (p *lastEntryQuery) String() string {
	return fmt.Sprintf("SessionID=%d", p.Session().ID())
}

var _ LastEntryQuery = &lastEntryQuery{}

type PrevEntryQuery interface {
	Query
	Request() (*indexedmap.PrevEntryRequest, error)
	Reply(*indexedmap.PrevEntryResponse) error
}

func newPrevEntryQuery(query rsm.Query) PrevEntryQuery {
	return &prevEntryQuery{
		Query: newQuery(query),
		query: query,
	}
}

type prevEntryQuery struct {
	Query
	query rsm.Query
}

func (p *prevEntryQuery) Request() (*indexedmap.PrevEntryRequest, error) {
	request := &indexedmap.PrevEntryRequest{}
	if err := proto.Unmarshal(p.query.Input(), request); err != nil {
		return nil, err
	}
	log.Debugf("Received PrevEntryQuery %s: %s", p, request)
	return request, nil
}

func (p *prevEntryQuery) Reply(response *indexedmap.PrevEntryResponse) error {
	log.Debugf("Sending PrevEntryQuery %s: %s", p, response)
	output, err := proto.Marshal(response)
	if err != nil {
		return err
	}
	p.query.Output(output, nil)
	p.query.Close()
	return nil
}

func (p *prevEntryQuery) String() string {
	return fmt.Sprintf("SessionID=%d", p.Session().ID())
}

var _ PrevEntryQuery = &prevEntryQuery{}

type NextEntryQuery interface {
	Query
	Request() (*indexedmap.NextEntryRequest, error)
	Reply(*indexedmap.NextEntryResponse) error
}

func newNextEntryQuery(query rsm.Query) NextEntryQuery {
	return &nextEntryQuery{
		Query: newQuery(query),
		query: query,
	}
}

type nextEntryQuery struct {
	Query
	query rsm.Query
}

func (p *nextEntryQuery) Request() (*indexedmap.NextEntryRequest, error) {
	request := &indexedmap.NextEntryRequest{}
	if err := proto.Unmarshal(p.query.Input(), request); err != nil {
		return nil, err
	}
	log.Debugf("Received NextEntryQuery %s: %s", p, request)
	return request, nil
}

func (p *nextEntryQuery) Reply(response *indexedmap.NextEntryResponse) error {
	log.Debugf("Sending NextEntryQuery %s: %s", p, response)
	output, err := proto.Marshal(response)
	if err != nil {
		return err
	}
	p.query.Output(output, nil)
	p.query.Close()
	return nil
}

func (p *nextEntryQuery) String() string {
	return fmt.Sprintf("SessionID=%d", p.Session().ID())
}

var _ NextEntryQuery = &nextEntryQuery{}

type RemoveProposals interface {
	Get(ProposalID) (RemoveProposal, bool)
	List() []RemoveProposal
}

func newRemoveProposals(commands rsm.Commands) RemoveProposals {
	return &removeProposals{
		commands: commands,
	}
}

type removeProposals struct {
	commands rsm.Commands
}

func (p *removeProposals) Get(id ProposalID) (RemoveProposal, bool) {
	command, ok := p.commands.Get(rsm.CommandID(id))
	if !ok {
		return nil, false
	}
	return newRemoveProposal(command), true
}

func (p *removeProposals) List() []RemoveProposal {
	commands := p.commands.List(rsm.OperationID(8))
	proposals := make([]RemoveProposal, len(commands))
	for i, command := range commands {
		proposals[i] = newRemoveProposal(command)
	}
	return proposals
}

var _ RemoveProposals = &removeProposals{}

type RemoveProposal interface {
	Proposal
	Request() (*indexedmap.RemoveRequest, error)
	Reply(*indexedmap.RemoveResponse) error
	Fail(error) error
}

func newRemoveProposal(command rsm.Command) RemoveProposal {
	return &removeProposal{
		Proposal: newProposal(command),
		command:  command,
	}
}

type removeProposal struct {
	Proposal
	command  rsm.Command
	complete bool
}

func (p *removeProposal) Request() (*indexedmap.RemoveRequest, error) {
	request := &indexedmap.RemoveRequest{}
	if err := proto.Unmarshal(p.command.Input(), request); err != nil {
		return nil, err
	}
	log.Debugf("Received RemoveProposal %s: %s", p, request)
	return request, nil
}

func (p *removeProposal) Reply(response *indexedmap.RemoveResponse) error {
	if p.complete {
		return errors.NewConflict("proposal is already complete")
	}
	log.Debugf("Sending RemoveProposal %s: %s", p, response)
	output, err := proto.Marshal(response)
	if err != nil {
		return err
	}
	p.command.Output(output, nil)
	p.command.Close()
	p.complete = true
	return nil
}

func (p *removeProposal) Fail(err error) error {
	if p.complete {
		return errors.NewConflict("proposal is already complete")
	}
	log.Debugf("Failing RemoveProposal %s: %s", p, err)
	p.command.Output(nil, err)
	p.command.Close()
	p.complete = true
	return nil
}

func (p *removeProposal) String() string {
	return fmt.Sprintf("ProposalID=%d, SessionID=%d", p.ID(), p.Session().ID())
}

var _ RemoveProposal = &removeProposal{}

type ClearProposals interface {
	Get(ProposalID) (ClearProposal, bool)
	List() []ClearProposal
}

func newClearProposals(commands rsm.Commands) ClearProposals {
	return &clearProposals{
		commands: commands,
	}
}

type clearProposals struct {
	commands rsm.Commands
}

func (p *clearProposals) Get(id ProposalID) (ClearProposal, bool) {
	command, ok := p.commands.Get(rsm.CommandID(id))
	if !ok {
		return nil, false
	}
	return newClearProposal(command), true
}

func (p *clearProposals) List() []ClearProposal {
	commands := p.commands.List(rsm.OperationID(9))
	proposals := make([]ClearProposal, len(commands))
	for i, command := range commands {
		proposals[i] = newClearProposal(command)
	}
	return proposals
}

var _ ClearProposals = &clearProposals{}

type ClearProposal interface {
	Proposal
	Request() (*indexedmap.ClearRequest, error)
	Reply(*indexedmap.ClearResponse) error
	Fail(error) error
}

func newClearProposal(command rsm.Command) ClearProposal {
	return &clearProposal{
		Proposal: newProposal(command),
		command:  command,
	}
}

type clearProposal struct {
	Proposal
	command  rsm.Command
	complete bool
}

func (p *clearProposal) Request() (*indexedmap.ClearRequest, error) {
	request := &indexedmap.ClearRequest{}
	if err := proto.Unmarshal(p.command.Input(), request); err != nil {
		return nil, err
	}
	log.Debugf("Received ClearProposal %s: %s", p, request)
	return request, nil
}

func (p *clearProposal) Reply(response *indexedmap.ClearResponse) error {
	if p.complete {
		return errors.NewConflict("proposal is already complete")
	}
	log.Debugf("Sending ClearProposal %s: %s", p, response)
	output, err := proto.Marshal(response)
	if err != nil {
		return err
	}
	p.command.Output(output, nil)
	p.command.Close()
	p.complete = true
	return nil
}

func (p *clearProposal) Fail(err error) error {
	if p.complete {
		return errors.NewConflict("proposal is already complete")
	}
	log.Debugf("Failing ClearProposal %s: %s", p, err)
	p.command.Output(nil, err)
	p.command.Close()
	p.complete = true
	return nil
}

func (p *clearProposal) String() string {
	return fmt.Sprintf("ProposalID=%d, SessionID=%d", p.ID(), p.Session().ID())
}

var _ ClearProposal = &clearProposal{}

type EventsProposals interface {
	Get(ProposalID) (EventsProposal, bool)
	List() []EventsProposal
}

func newEventsProposals(commands rsm.Commands) EventsProposals {
	return &eventsProposals{
		commands: commands,
	}
}

type eventsProposals struct {
	commands rsm.Commands
}

func (p *eventsProposals) Get(id ProposalID) (EventsProposal, bool) {
	command, ok := p.commands.Get(rsm.CommandID(id))
	if !ok {
		return nil, false
	}
	return newEventsProposal(command), true
}

func (p *eventsProposals) List() []EventsProposal {
	commands := p.commands.List(rsm.OperationID(10))
	proposals := make([]EventsProposal, len(commands))
	for i, command := range commands {
		proposals[i] = newEventsProposal(command)
	}
	return proposals
}

var _ EventsProposals = &eventsProposals{}

type EventsProposal interface {
	Proposal
	Request() (*indexedmap.EventsRequest, error)
	Notify(*indexedmap.EventsResponse) error
	Close() error
}

func newEventsProposal(command rsm.Command) EventsProposal {
	return &eventsProposal{
		Proposal: newProposal(command),
		command:  command,
	}
}

type eventsProposal struct {
	Proposal
	command rsm.Command
}

func (p *eventsProposal) Request() (*indexedmap.EventsRequest, error) {
	request := &indexedmap.EventsRequest{}
	if err := proto.Unmarshal(p.command.Input(), request); err != nil {
		return nil, err
	}
	log.Debugf("Received EventsProposal %s: %s", p, request)
	return request, nil
}

func (p *eventsProposal) Notify(response *indexedmap.EventsResponse) error {
	log.Debugf("Notifying EventsProposal %s: %s", p, response)
	output, err := proto.Marshal(response)
	if err != nil {
		return err
	}
	p.command.Output(output, nil)
	return nil
}

func (p *eventsProposal) Close() error {
	p.command.Close()
	return nil
}

func (p *eventsProposal) String() string {
	return fmt.Sprintf("ProposalID=%d, SessionID=%d", p.ID(), p.Session().ID())
}

var _ EventsProposal = &eventsProposal{}

type EntriesQuery interface {
	Query
	Request() (*indexedmap.EntriesRequest, error)
	Notify(*indexedmap.EntriesResponse) error
	Close() error
}

func newEntriesQuery(query rsm.Query) EntriesQuery {
	return &entriesQuery{
		Query: newQuery(query),
		query: query,
	}
}

type entriesQuery struct {
	Query
	query rsm.Query
}

func (p *entriesQuery) Request() (*indexedmap.EntriesRequest, error) {
	request := &indexedmap.EntriesRequest{}
	if err := proto.Unmarshal(p.query.Input(), request); err != nil {
		return nil, err
	}
	log.Debugf("Received EntriesQuery %s: %s", p, request)
	return request, nil
}

func (p *entriesQuery) Notify(response *indexedmap.EntriesResponse) error {
	log.Debugf("Notifying EntriesQuery %s: %s", p, response)
	output, err := proto.Marshal(response)
	if err != nil {
		return err
	}
	p.query.Output(output, nil)
	return nil
}

func (p *entriesQuery) Close() error {
	p.query.Close()
	return nil
}

func (p *entriesQuery) String() string {
	return fmt.Sprintf("SessionID=%d", p.Session().ID())
}

var _ EntriesQuery = &entriesQuery{}
