// Code generated by atomix-go-framework. DO NOT EDIT.
package lock

import (
	"github.com/atomix/atomix-go-framework/pkg/atomix/errors"
	"github.com/atomix/atomix-go-framework/pkg/atomix/logging"
	"github.com/atomix/atomix-go-framework/pkg/atomix/storage/protocol/rsm"
	"io"
)

var log = logging.GetLogger("atomix", "lock", "service")

const Type = "Lock"

const (
	lockOp    = "Lock"
	unlockOp  = "Unlock"
	getLockOp = "GetLock"
)

var newServiceFunc rsm.NewServiceFunc

func registerServiceFunc(rsmf NewServiceFunc) {
	newServiceFunc = func(context rsm.ServiceContext) rsm.Service {
		return &ServiceAdaptor{
			ServiceContext: context,
			rsm:            rsmf(newServiceContext(context)),
		}
	}
}

type NewServiceFunc func(ServiceContext) Service

// RegisterService registers the election primitive service on the given node
func RegisterService(node *rsm.Node) {
	node.RegisterService(Type, newServiceFunc)
}

type ServiceAdaptor struct {
	rsm.ServiceContext
	rsm Service
}

func (s *ServiceAdaptor) ExecuteCommand(command rsm.Command) error {
	switch command.OperationID() {
	case 1:
		p := newLockProposal(command)
		log.Debugf("Proposing LockProposal %s", p)
		err := s.rsm.Lock(p)
		if err != nil {
			log.Warn(err)
			return err
		}
		return nil
	case 2:
		p := newUnlockProposal(command)
		log.Debugf("Proposing UnlockProposal %s", p)
		err := s.rsm.Unlock(p)
		if err != nil {
			log.Warn(err)
			return err
		}
		return nil
	default:
		err := errors.NewNotSupported("unknown operation %d", command.OperationID())
		log.Warn(err)
		return err
	}
}

func (s *ServiceAdaptor) ExecuteQuery(query rsm.Query) error {
	switch query.OperationID() {
	case 3:
		q := newGetLockQuery(query)
		log.Debugf("Querying GetLockQuery %s", q)
		err := s.rsm.GetLock(q)
		if err != nil {
			log.Warn(err)
			return err
		}
		return nil
	default:
		err := errors.NewNotSupported("unknown operation %d", query.OperationID())
		log.Warn(err)
		return err
	}
}
func (s *ServiceAdaptor) Backup(writer io.Writer) error {
	err := s.rsm.Backup(newSnapshotWriter(writer))
	if err != nil {
		log.Error(err)
		return err
	}
	return nil
}

func (s *ServiceAdaptor) Restore(reader io.Reader) error {
	err := s.rsm.Restore(newSnapshotReader(reader))
	if err != nil {
		log.Error(err)
		return err
	}
	return nil
}

var _ rsm.Service = &ServiceAdaptor{}
