/*
Copyright 2021-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.protocol.gossip;

import "atomix/primitive/meta/object.proto";
import "gogoproto/gogo.proto";

message RequestHeader {
    uint32 partition_id = 1 [(gogoproto.customname) = "PartitionID", (gogoproto.casttype) = "PartitionID"];
    string service_type = 2 [(gogoproto.casttype) = "ServiceType"];
    string service_id = 3 [(gogoproto.customname) = "ServiceID", (gogoproto.casttype) = "ServiceID"];
}

message CloneRequest {
    RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message CloneResponse {
    Object object = 1 [(gogoproto.nullable) = false];
}

message ReadRequest {
    RequestHeader header = 1 [(gogoproto.nullable) = false];
    atomix.primitive.meta.ObjectMeta meta = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    string key = 3;
}

message ReadResponse {
    Object object = 1;
}

message Object {
    atomix.primitive.meta.ObjectMeta meta = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    string key = 2;
    bytes value = 3;
}

message GossipMessage {
    oneof message {
        Initialize initialize = 1;
        Advertise advertise = 2;
        Update update = 3;
    }
}

message Initialize {
    uint32 partition_id = 1 [(gogoproto.customname) = "PartitionID", (gogoproto.casttype) = "PartitionID"];
    string service_type = 2 [(gogoproto.casttype) = "ServiceType"];
    string service_id = 3 [(gogoproto.customname) = "ServiceID", (gogoproto.casttype) = "ServiceID"];
}

message Advertise {
    atomix.primitive.meta.ObjectMeta meta = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    string key = 2;
}

message Update {
    Object object = 1 [(gogoproto.nullable) = false];
}

service GossipProtocol {
    rpc Clone (CloneRequest) returns (stream CloneResponse);
    rpc Read (ReadRequest) returns (ReadResponse);
    rpc Gossip (stream GossipMessage) returns (stream GossipMessage);
}
