// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/driver/proxy/gossip/config.proto

package gossip

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GossipConfig struct {
	Clock             *GossipClock `protobuf:"bytes,1,opt,name=clock,proto3" json:"clock,omitempty"`
	ReplicationFactor uint32       `protobuf:"varint,2,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
}

func (m *GossipConfig) Reset()         { *m = GossipConfig{} }
func (m *GossipConfig) String() string { return proto.CompactTextString(m) }
func (*GossipConfig) ProtoMessage()    {}
func (*GossipConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ef066480e0ee610, []int{0}
}
func (m *GossipConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GossipConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GossipConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GossipConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GossipConfig.Merge(m, src)
}
func (m *GossipConfig) XXX_Size() int {
	return m.Size()
}
func (m *GossipConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GossipConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GossipConfig proto.InternalMessageInfo

func (m *GossipConfig) GetClock() *GossipClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

func (m *GossipConfig) GetReplicationFactor() uint32 {
	if m != nil {
		return m.ReplicationFactor
	}
	return 0
}

type GossipClock struct {
	// Types that are valid to be assigned to Clock:
	//	*GossipClock_Logical
	//	*GossipClock_Physical
	//	*GossipClock_Epoch
	Clock isGossipClock_Clock `protobuf_oneof:"clock"`
}

func (m *GossipClock) Reset()         { *m = GossipClock{} }
func (m *GossipClock) String() string { return proto.CompactTextString(m) }
func (*GossipClock) ProtoMessage()    {}
func (*GossipClock) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ef066480e0ee610, []int{1}
}
func (m *GossipClock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GossipClock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GossipClock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GossipClock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GossipClock.Merge(m, src)
}
func (m *GossipClock) XXX_Size() int {
	return m.Size()
}
func (m *GossipClock) XXX_DiscardUnknown() {
	xxx_messageInfo_GossipClock.DiscardUnknown(m)
}

var xxx_messageInfo_GossipClock proto.InternalMessageInfo

type isGossipClock_Clock interface {
	isGossipClock_Clock()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GossipClock_Logical struct {
	Logical *LogicalClock `protobuf:"bytes,1,opt,name=logical,proto3,oneof" json:"logical,omitempty"`
}
type GossipClock_Physical struct {
	Physical *PhysicalClock `protobuf:"bytes,2,opt,name=physical,proto3,oneof" json:"physical,omitempty"`
}
type GossipClock_Epoch struct {
	Epoch *EpochClock `protobuf:"bytes,3,opt,name=epoch,proto3,oneof" json:"epoch,omitempty"`
}

func (*GossipClock_Logical) isGossipClock_Clock()  {}
func (*GossipClock_Physical) isGossipClock_Clock() {}
func (*GossipClock_Epoch) isGossipClock_Clock()    {}

func (m *GossipClock) GetClock() isGossipClock_Clock {
	if m != nil {
		return m.Clock
	}
	return nil
}

func (m *GossipClock) GetLogical() *LogicalClock {
	if x, ok := m.GetClock().(*GossipClock_Logical); ok {
		return x.Logical
	}
	return nil
}

func (m *GossipClock) GetPhysical() *PhysicalClock {
	if x, ok := m.GetClock().(*GossipClock_Physical); ok {
		return x.Physical
	}
	return nil
}

func (m *GossipClock) GetEpoch() *EpochClock {
	if x, ok := m.GetClock().(*GossipClock_Epoch); ok {
		return x.Epoch
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GossipClock) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GossipClock_Logical)(nil),
		(*GossipClock_Physical)(nil),
		(*GossipClock_Epoch)(nil),
	}
}

type LogicalClock struct {
}

func (m *LogicalClock) Reset()         { *m = LogicalClock{} }
func (m *LogicalClock) String() string { return proto.CompactTextString(m) }
func (*LogicalClock) ProtoMessage()    {}
func (*LogicalClock) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ef066480e0ee610, []int{2}
}
func (m *LogicalClock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogicalClock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogicalClock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogicalClock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalClock.Merge(m, src)
}
func (m *LogicalClock) XXX_Size() int {
	return m.Size()
}
func (m *LogicalClock) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalClock.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalClock proto.InternalMessageInfo

type PhysicalClock struct {
}

func (m *PhysicalClock) Reset()         { *m = PhysicalClock{} }
func (m *PhysicalClock) String() string { return proto.CompactTextString(m) }
func (*PhysicalClock) ProtoMessage()    {}
func (*PhysicalClock) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ef066480e0ee610, []int{3}
}
func (m *PhysicalClock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhysicalClock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhysicalClock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhysicalClock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalClock.Merge(m, src)
}
func (m *PhysicalClock) XXX_Size() int {
	return m.Size()
}
func (m *PhysicalClock) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalClock.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalClock proto.InternalMessageInfo

type EpochClock struct {
	Election *EpochClockElection `protobuf:"bytes,1,opt,name=election,proto3" json:"election,omitempty"`
}

func (m *EpochClock) Reset()         { *m = EpochClock{} }
func (m *EpochClock) String() string { return proto.CompactTextString(m) }
func (*EpochClock) ProtoMessage()    {}
func (*EpochClock) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ef066480e0ee610, []int{4}
}
func (m *EpochClock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochClock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochClock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochClock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochClock.Merge(m, src)
}
func (m *EpochClock) XXX_Size() int {
	return m.Size()
}
func (m *EpochClock) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochClock.DiscardUnknown(m)
}

var xxx_messageInfo_EpochClock proto.InternalMessageInfo

func (m *EpochClock) GetElection() *EpochClockElection {
	if m != nil {
		return m.Election
	}
	return nil
}

type EpochClockElection struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *EpochClockElection) Reset()         { *m = EpochClockElection{} }
func (m *EpochClockElection) String() string { return proto.CompactTextString(m) }
func (*EpochClockElection) ProtoMessage()    {}
func (*EpochClockElection) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ef066480e0ee610, []int{5}
}
func (m *EpochClockElection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochClockElection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochClockElection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochClockElection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochClockElection.Merge(m, src)
}
func (m *EpochClockElection) XXX_Size() int {
	return m.Size()
}
func (m *EpochClockElection) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochClockElection.DiscardUnknown(m)
}

var xxx_messageInfo_EpochClockElection proto.InternalMessageInfo

func (m *EpochClockElection) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*GossipConfig)(nil), "atomix.storage.proxy.gossip.GossipConfig")
	proto.RegisterType((*GossipClock)(nil), "atomix.storage.proxy.gossip.GossipClock")
	proto.RegisterType((*LogicalClock)(nil), "atomix.storage.proxy.gossip.LogicalClock")
	proto.RegisterType((*PhysicalClock)(nil), "atomix.storage.proxy.gossip.PhysicalClock")
	proto.RegisterType((*EpochClock)(nil), "atomix.storage.proxy.gossip.EpochClock")
	proto.RegisterType((*EpochClockElection)(nil), "atomix.storage.proxy.gossip.EpochClockElection")
}

func init() {
	proto.RegisterFile("atomix/driver/proxy/gossip/config.proto", fileDescriptor_4ef066480e0ee610)
}

var fileDescriptor_4ef066480e0ee610 = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x31, 0x4b, 0xc3, 0x40,
	0x14, 0xc7, 0x73, 0xd5, 0xda, 0xfa, 0xda, 0x2a, 0xde, 0x14, 0x10, 0x42, 0xc9, 0xd2, 0x28, 0x98,
	0x80, 0xee, 0x0a, 0x95, 0x6a, 0x41, 0x07, 0xc9, 0xe6, 0x24, 0xe7, 0x79, 0x4d, 0x0f, 0xd3, 0xbe,
	0xe3, 0x12, 0xa4, 0x1d, 0xfc, 0x0e, 0x7e, 0x2c, 0xc7, 0x8e, 0x8e, 0xd2, 0x2e, 0x7e, 0x0c, 0xe9,
	0xe5, 0x5a, 0x2b, 0x42, 0x70, 0x3b, 0x78, 0xff, 0xdf, 0xef, 0x3d, 0xfe, 0x1c, 0x74, 0x58, 0x8e,
	0x23, 0x39, 0x89, 0x9e, 0xb4, 0x7c, 0x11, 0x3a, 0x52, 0x1a, 0x27, 0xd3, 0x28, 0xc1, 0x2c, 0x93,
	0x2a, 0xe2, 0x38, 0x1e, 0xc8, 0x24, 0x54, 0x1a, 0x73, 0xa4, 0x87, 0x45, 0x30, 0xcc, 0x72, 0xd4,
	0x2c, 0x11, 0xa1, 0x49, 0x86, 0x45, 0xd2, 0x7f, 0x85, 0xe6, 0xb5, 0x79, 0x5d, 0x1a, 0x84, 0x9e,
	0x43, 0x95, 0xa7, 0xc8, 0x9f, 0x5d, 0xd2, 0x26, 0x41, 0xe3, 0x34, 0x08, 0x4b, 0xe0, 0xd0, 0x92,
	0xcb, 0x7c, 0x5c, 0x60, 0xf4, 0x04, 0xa8, 0x16, 0x2a, 0x95, 0x9c, 0xe5, 0x12, 0xc7, 0x0f, 0x03,
	0xc6, 0x73, 0xd4, 0x6e, 0xa5, 0x4d, 0x82, 0x56, 0x7c, 0xb0, 0x31, 0xb9, 0x32, 0x03, 0xff, 0x8b,
	0x40, 0x63, 0xc3, 0x42, 0x7b, 0x50, 0x4b, 0x31, 0x91, 0x9c, 0xa5, 0xf6, 0x80, 0xa3, 0xd2, 0x03,
	0x6e, 0x8b, 0xac, 0x61, 0xfb, 0x4e, 0xbc, 0x62, 0x69, 0x1f, 0xea, 0x6a, 0x38, 0xcd, 0x8c, 0xa7,
	0x62, 0x3c, 0xc7, 0xa5, 0x9e, 0x3b, 0x1b, 0x5e, 0x89, 0xd6, 0x34, 0xbd, 0x80, 0xaa, 0x50, 0xc8,
	0x87, 0xee, 0x96, 0xd1, 0x74, 0x4a, 0x35, 0xbd, 0x65, 0x72, 0xe5, 0x28, 0xb8, 0x6e, 0xcd, 0x16,
	0xea, 0xef, 0x41, 0x73, 0xf3, 0x5c, 0x7f, 0x1f, 0x5a, 0xbf, 0xd6, 0xfa, 0xf7, 0x00, 0x3f, 0x02,
	0x7a, 0x03, 0x75, 0x91, 0x0a, 0xbe, 0xec, 0xca, 0x56, 0x11, 0xfd, 0x73, 0x77, 0xcf, 0x62, 0xf1,
	0x5a, 0xe0, 0x07, 0x40, 0xff, 0xce, 0x29, 0x85, 0xed, 0x31, 0x1b, 0x09, 0xa3, 0xdf, 0x8d, 0xcd,
	0xbb, 0xeb, 0xbe, 0xcf, 0x3d, 0x32, 0x9b, 0x7b, 0xe4, 0x73, 0xee, 0x91, 0xb7, 0x85, 0xe7, 0xcc,
	0x16, 0x9e, 0xf3, 0xb1, 0xf0, 0x9c, 0xc7, 0x1d, 0xf3, 0x9b, 0xce, 0xbe, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x84, 0xd7, 0xa5, 0x96, 0x78, 0x02, 0x00, 0x00,
}

func (m *GossipConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GossipConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GossipConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReplicationFactor != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.ReplicationFactor))
		i--
		dAtA[i] = 0x10
	}
	if m.Clock != nil {
		{
			size, err := m.Clock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GossipClock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GossipClock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GossipClock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != nil {
		{
			size := m.Clock.Size()
			i -= size
			if _, err := m.Clock.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GossipClock_Logical) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GossipClock_Logical) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Logical != nil {
		{
			size, err := m.Logical.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GossipClock_Physical) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GossipClock_Physical) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Physical != nil {
		{
			size, err := m.Physical.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GossipClock_Epoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GossipClock_Epoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Epoch != nil {
		{
			size, err := m.Epoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *LogicalClock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicalClock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogicalClock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PhysicalClock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhysicalClock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhysicalClock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EpochClock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochClock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochClock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Election != nil {
		{
			size, err := m.Election.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EpochClockElection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochClockElection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochClockElection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GossipConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.ReplicationFactor != 0 {
		n += 1 + sovConfig(uint64(m.ReplicationFactor))
	}
	return n
}

func (m *GossipClock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Clock != nil {
		n += m.Clock.Size()
	}
	return n
}

func (m *GossipClock_Logical) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Logical != nil {
		l = m.Logical.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}
func (m *GossipClock_Physical) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Physical != nil {
		l = m.Physical.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}
func (m *GossipClock_Epoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != nil {
		l = m.Epoch.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}
func (m *LogicalClock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PhysicalClock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EpochClock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Election != nil {
		l = m.Election.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}

func (m *EpochClockElection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}

func sovConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GossipConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GossipConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GossipConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &GossipClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationFactor", wireType)
			}
			m.ReplicationFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicationFactor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GossipClock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GossipClock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GossipClock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logical", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LogicalClock{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Clock = &GossipClock_Logical{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Physical", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PhysicalClock{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Clock = &GossipClock_Physical{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EpochClock{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Clock = &GossipClock_Epoch{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogicalClock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicalClock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicalClock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhysicalClock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhysicalClock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhysicalClock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochClock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochClock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochClock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Election", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Election == nil {
				m.Election = &EpochClockElection{}
			}
			if err := m.Election.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochClockElection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochClockElection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochClockElection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfig = fmt.Errorf("proto: unexpected end of group")
)
