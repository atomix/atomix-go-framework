// Code generated by atomix-go-framework. DO NOT EDIT.
package counter

import (
	"context"
	counter "github.com/atomix/atomix-api/go/atomix/primitive/counter"
	"github.com/atomix/atomix-go-framework/pkg/atomix/driver/proxy/gossip"
	"github.com/atomix/atomix-go-framework/pkg/atomix/errors"
	"github.com/atomix/atomix-go-framework/pkg/atomix/logging"
)

// NewProxyServer creates a new ProxyServer
func NewProxyServer(server *gossip.Server) counter.CounterServiceServer {
	return &ProxyServer{
		Server: server,
		log:    logging.GetLogger("atomix", "counter"),
	}
}

type ProxyServer struct {
	*gossip.Server
	log logging.Logger
}

func (s *ProxyServer) Set(ctx context.Context, request *counter.SetRequest) (*counter.SetResponse, error) {
	s.log.Debugf("Received SetRequest %+v", request)
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive headers"))
	}

	clusterKey, ok := gossip.GetClusterKey(md)
	if !ok {
		primitiveName, ok := gossip.GetPrimitiveName(md)
		if !ok {
			return nil, errors.Proto(errors.NewInvalid("missing primitive header"))
		}
		clusterKey = fmt.Sprintf("%s.%s", s.Namespace, primitiveName)
	}
	partition := s.PartitionBy([]byte(clusterKey))

	conn, err := partition.Connect()
	if err != nil {
		return nil, errors.Proto(err)
	}

	client := counter.NewCounterServiceClient(conn)
	ctx = partition.AddRequestHeaders(ctx)
	response, err := client.Set(ctx, request)
	if err != nil {
		s.log.Errorf("Request SetRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	s.log.Debugf("Sending SetResponse %+v", response)
	return response, nil
}

func (s *ProxyServer) Get(ctx context.Context, request *counter.GetRequest) (*counter.GetResponse, error) {
	s.log.Debugf("Received GetRequest %+v", request)
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive headers"))
	}

	clusterKey, ok := gossip.GetClusterKey(md)
	if !ok {
		primitiveName, ok := gossip.GetPrimitiveName(md)
		if !ok {
			return nil, errors.Proto(errors.NewInvalid("missing primitive header"))
		}
		clusterKey = fmt.Sprintf("%s.%s", s.Namespace, primitiveName)
	}
	partition := s.PartitionBy([]byte(clusterKey))

	conn, err := partition.Connect()
	if err != nil {
		return nil, errors.Proto(err)
	}

	client := counter.NewCounterServiceClient(conn)
	ctx = partition.AddRequestHeaders(ctx)
	response, err := client.Get(ctx, request)
	if err != nil {
		s.log.Errorf("Request GetRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	s.log.Debugf("Sending GetResponse %+v", response)
	return response, nil
}

func (s *ProxyServer) Increment(ctx context.Context, request *counter.IncrementRequest) (*counter.IncrementResponse, error) {
	s.log.Debugf("Received IncrementRequest %+v", request)
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive headers"))
	}

	clusterKey, ok := gossip.GetClusterKey(md)
	if !ok {
		primitiveName, ok := gossip.GetPrimitiveName(md)
		if !ok {
			return nil, errors.Proto(errors.NewInvalid("missing primitive header"))
		}
		clusterKey = fmt.Sprintf("%s.%s", s.Namespace, primitiveName)
	}
	partition := s.PartitionBy([]byte(clusterKey))

	conn, err := partition.Connect()
	if err != nil {
		return nil, errors.Proto(err)
	}

	client := counter.NewCounterServiceClient(conn)
	ctx = partition.AddRequestHeaders(ctx)
	response, err := client.Increment(ctx, request)
	if err != nil {
		s.log.Errorf("Request IncrementRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	s.log.Debugf("Sending IncrementResponse %+v", response)
	return response, nil
}

func (s *ProxyServer) Decrement(ctx context.Context, request *counter.DecrementRequest) (*counter.DecrementResponse, error) {
	s.log.Debugf("Received DecrementRequest %+v", request)
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive headers"))
	}

	clusterKey, ok := gossip.GetClusterKey(md)
	if !ok {
		primitiveName, ok := gossip.GetPrimitiveName(md)
		if !ok {
			return nil, errors.Proto(errors.NewInvalid("missing primitive header"))
		}
		clusterKey = fmt.Sprintf("%s.%s", s.Namespace, primitiveName)
	}
	partition := s.PartitionBy([]byte(clusterKey))

	conn, err := partition.Connect()
	if err != nil {
		return nil, errors.Proto(err)
	}

	client := counter.NewCounterServiceClient(conn)
	ctx = partition.AddRequestHeaders(ctx)
	response, err := client.Decrement(ctx, request)
	if err != nil {
		s.log.Errorf("Request DecrementRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	s.log.Debugf("Sending DecrementResponse %+v", response)
	return response, nil
}
