// Code generated by atomix-go-framework. DO NOT EDIT.
package list

import (
	"context"
	list "github.com/atomix/atomix-api/go/atomix/primitive/list"
	"github.com/atomix/atomix-go-framework/pkg/atomix/driver/proxy/rsm"
	"github.com/atomix/atomix-go-framework/pkg/atomix/errors"
	"github.com/atomix/atomix-go-framework/pkg/atomix/logging"
	storage "github.com/atomix/atomix-go-framework/pkg/atomix/storage/protocol/rsm"
	streams "github.com/atomix/atomix-go-framework/pkg/atomix/stream"
	"github.com/golang/protobuf/proto"
)

const Type = "List"

const (
	sizeOp     storage.OperationID = 1
	appendOp   storage.OperationID = 2
	insertOp   storage.OperationID = 3
	getOp      storage.OperationID = 4
	setOp      storage.OperationID = 5
	removeOp   storage.OperationID = 6
	clearOp    storage.OperationID = 7
	eventsOp   storage.OperationID = 8
	elementsOp storage.OperationID = 9
)

var log = logging.GetLogger("atomix", "proxy", "list")

// NewProxyServer creates a new ProxyServer
func NewProxyServer(client *rsm.Client, readSync bool) list.ListServiceServer {
	return &ProxyServer{
		Client:   client,
		readSync: readSync,
	}
}

type ProxyServer struct {
	*rsm.Client
	readSync bool
	log      logging.Logger
}

func (s *ProxyServer) Size(ctx context.Context, request *list.SizeRequest) (*list.SizeResponse, error) {
	log.Debugf("Received SizeRequest %+v", request)
	input, err := proto.Marshal(request)
	if err != nil {
		log.Errorf("Request SizeRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	clusterKey := request.Headers.ClusterKey
	if clusterKey == "" {
		clusterKey = request.Headers.PrimitiveID.String()
	}
	partition := s.PartitionBy([]byte(clusterKey))

	serviceInfo := storage.ServiceInfo{
		Type:      storage.ServiceType(Type),
		Namespace: s.Namespace,
		Name:      request.Headers.PrimitiveID.Name,
	}
	service, err := partition.GetService(ctx, serviceInfo)
	if err != nil {
		log.Errorf("Request SizeRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	output, err := service.DoQuery(ctx, sizeOp, input, s.readSync)
	if err != nil {
		log.Warnf("Request SizeRequest failed: %v", err)
		return nil, errors.Proto(err)
	}

	response := &list.SizeResponse{}
	err = proto.Unmarshal(output, response)
	if err != nil {
		log.Errorf("Request SizeRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	log.Debugf("Sending SizeResponse %+v", response)
	return response, nil
}

func (s *ProxyServer) Append(ctx context.Context, request *list.AppendRequest) (*list.AppendResponse, error) {
	log.Debugf("Received AppendRequest %+v", request)
	input, err := proto.Marshal(request)
	if err != nil {
		log.Errorf("Request AppendRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	clusterKey := request.Headers.ClusterKey
	if clusterKey == "" {
		clusterKey = request.Headers.PrimitiveID.String()
	}
	partition := s.PartitionBy([]byte(clusterKey))

	serviceInfo := storage.ServiceInfo{
		Type:      storage.ServiceType(Type),
		Namespace: s.Namespace,
		Name:      request.Headers.PrimitiveID.Name,
	}
	service, err := partition.GetService(ctx, serviceInfo)
	if err != nil {
		log.Errorf("Request AppendRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	output, err := service.DoCommand(ctx, appendOp, input)
	if err != nil {
		log.Warnf("Request AppendRequest failed: %v", err)
		return nil, errors.Proto(err)
	}

	response := &list.AppendResponse{}
	err = proto.Unmarshal(output, response)
	if err != nil {
		log.Errorf("Request AppendRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	log.Debugf("Sending AppendResponse %+v", response)
	return response, nil
}

func (s *ProxyServer) Insert(ctx context.Context, request *list.InsertRequest) (*list.InsertResponse, error) {
	log.Debugf("Received InsertRequest %+v", request)
	input, err := proto.Marshal(request)
	if err != nil {
		log.Errorf("Request InsertRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	clusterKey := request.Headers.ClusterKey
	if clusterKey == "" {
		clusterKey = request.Headers.PrimitiveID.String()
	}
	partition := s.PartitionBy([]byte(clusterKey))

	serviceInfo := storage.ServiceInfo{
		Type:      storage.ServiceType(Type),
		Namespace: s.Namespace,
		Name:      request.Headers.PrimitiveID.Name,
	}
	service, err := partition.GetService(ctx, serviceInfo)
	if err != nil {
		log.Errorf("Request InsertRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	output, err := service.DoCommand(ctx, insertOp, input)
	if err != nil {
		log.Warnf("Request InsertRequest failed: %v", err)
		return nil, errors.Proto(err)
	}

	response := &list.InsertResponse{}
	err = proto.Unmarshal(output, response)
	if err != nil {
		log.Errorf("Request InsertRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	log.Debugf("Sending InsertResponse %+v", response)
	return response, nil
}

func (s *ProxyServer) Get(ctx context.Context, request *list.GetRequest) (*list.GetResponse, error) {
	log.Debugf("Received GetRequest %+v", request)
	input, err := proto.Marshal(request)
	if err != nil {
		log.Errorf("Request GetRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	clusterKey := request.Headers.ClusterKey
	if clusterKey == "" {
		clusterKey = request.Headers.PrimitiveID.String()
	}
	partition := s.PartitionBy([]byte(clusterKey))

	serviceInfo := storage.ServiceInfo{
		Type:      storage.ServiceType(Type),
		Namespace: s.Namespace,
		Name:      request.Headers.PrimitiveID.Name,
	}
	service, err := partition.GetService(ctx, serviceInfo)
	if err != nil {
		log.Errorf("Request GetRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	output, err := service.DoQuery(ctx, getOp, input, s.readSync)
	if err != nil {
		log.Warnf("Request GetRequest failed: %v", err)
		return nil, errors.Proto(err)
	}

	response := &list.GetResponse{}
	err = proto.Unmarshal(output, response)
	if err != nil {
		log.Errorf("Request GetRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	log.Debugf("Sending GetResponse %+v", response)
	return response, nil
}

func (s *ProxyServer) Set(ctx context.Context, request *list.SetRequest) (*list.SetResponse, error) {
	log.Debugf("Received SetRequest %+v", request)
	input, err := proto.Marshal(request)
	if err != nil {
		log.Errorf("Request SetRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	clusterKey := request.Headers.ClusterKey
	if clusterKey == "" {
		clusterKey = request.Headers.PrimitiveID.String()
	}
	partition := s.PartitionBy([]byte(clusterKey))

	serviceInfo := storage.ServiceInfo{
		Type:      storage.ServiceType(Type),
		Namespace: s.Namespace,
		Name:      request.Headers.PrimitiveID.Name,
	}
	service, err := partition.GetService(ctx, serviceInfo)
	if err != nil {
		log.Errorf("Request SetRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	output, err := service.DoCommand(ctx, setOp, input)
	if err != nil {
		log.Warnf("Request SetRequest failed: %v", err)
		return nil, errors.Proto(err)
	}

	response := &list.SetResponse{}
	err = proto.Unmarshal(output, response)
	if err != nil {
		log.Errorf("Request SetRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	log.Debugf("Sending SetResponse %+v", response)
	return response, nil
}

func (s *ProxyServer) Remove(ctx context.Context, request *list.RemoveRequest) (*list.RemoveResponse, error) {
	log.Debugf("Received RemoveRequest %+v", request)
	input, err := proto.Marshal(request)
	if err != nil {
		log.Errorf("Request RemoveRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	clusterKey := request.Headers.ClusterKey
	if clusterKey == "" {
		clusterKey = request.Headers.PrimitiveID.String()
	}
	partition := s.PartitionBy([]byte(clusterKey))

	serviceInfo := storage.ServiceInfo{
		Type:      storage.ServiceType(Type),
		Namespace: s.Namespace,
		Name:      request.Headers.PrimitiveID.Name,
	}
	service, err := partition.GetService(ctx, serviceInfo)
	if err != nil {
		log.Errorf("Request RemoveRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	output, err := service.DoCommand(ctx, removeOp, input)
	if err != nil {
		log.Warnf("Request RemoveRequest failed: %v", err)
		return nil, errors.Proto(err)
	}

	response := &list.RemoveResponse{}
	err = proto.Unmarshal(output, response)
	if err != nil {
		log.Errorf("Request RemoveRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	log.Debugf("Sending RemoveResponse %+v", response)
	return response, nil
}

func (s *ProxyServer) Clear(ctx context.Context, request *list.ClearRequest) (*list.ClearResponse, error) {
	log.Debugf("Received ClearRequest %+v", request)
	input, err := proto.Marshal(request)
	if err != nil {
		log.Errorf("Request ClearRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	clusterKey := request.Headers.ClusterKey
	if clusterKey == "" {
		clusterKey = request.Headers.PrimitiveID.String()
	}
	partition := s.PartitionBy([]byte(clusterKey))

	serviceInfo := storage.ServiceInfo{
		Type:      storage.ServiceType(Type),
		Namespace: s.Namespace,
		Name:      request.Headers.PrimitiveID.Name,
	}
	service, err := partition.GetService(ctx, serviceInfo)
	if err != nil {
		log.Errorf("Request ClearRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	output, err := service.DoCommand(ctx, clearOp, input)
	if err != nil {
		log.Warnf("Request ClearRequest failed: %v", err)
		return nil, errors.Proto(err)
	}

	response := &list.ClearResponse{}
	err = proto.Unmarshal(output, response)
	if err != nil {
		log.Errorf("Request ClearRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	log.Debugf("Sending ClearResponse %+v", response)
	return response, nil
}

func (s *ProxyServer) Events(request *list.EventsRequest, srv list.ListService_EventsServer) error {
	log.Debugf("Received EventsRequest %+v", request)
	input, err := proto.Marshal(request)
	if err != nil {
		log.Errorf("Request EventsRequest failed: %v", err)
		return errors.Proto(err)
	}

	ch := make(chan streams.Result)
	stream := streams.NewChannelStream(ch)
	clusterKey := request.Headers.ClusterKey
	if clusterKey == "" {
		clusterKey = request.Headers.PrimitiveID.String()
	}
	partition := s.PartitionBy([]byte(clusterKey))

	serviceInfo := storage.ServiceInfo{
		Type:      storage.ServiceType(Type),
		Namespace: s.Namespace,
		Name:      request.Headers.PrimitiveID.Name,
	}
	service, err := partition.GetService(srv.Context(), serviceInfo)
	if err != nil {
		return err
	}
	err = service.DoCommandStream(srv.Context(), eventsOp, input, stream)
	if err != nil {
		log.Warnf("Request EventsRequest failed: %v", err)
		return errors.Proto(err)
	}

	for result := range ch {
		if result.Failed() {
			if result.Error == context.Canceled {
				break
			}
			log.Warnf("Request EventsRequest failed: %v", result.Error)
			return errors.Proto(result.Error)
		}

		response := &list.EventsResponse{}
		err = proto.Unmarshal(result.Value.([]byte), response)
		if err != nil {
			log.Errorf("Request EventsRequest failed: %v", err)
			return errors.Proto(err)
		}

		log.Debugf("Sending EventsResponse %+v", response)
		if err = srv.Send(response); err != nil {
			log.Warnf("Response EventsResponse failed: %v", err)
			return err
		}
	}
	log.Debugf("Finished EventsRequest %+v", request)
	return nil
}

func (s *ProxyServer) Elements(request *list.ElementsRequest, srv list.ListService_ElementsServer) error {
	log.Debugf("Received ElementsRequest %+v", request)
	input, err := proto.Marshal(request)
	if err != nil {
		log.Errorf("Request ElementsRequest failed: %v", err)
		return errors.Proto(err)
	}

	ch := make(chan streams.Result)
	stream := streams.NewChannelStream(ch)
	clusterKey := request.Headers.ClusterKey
	if clusterKey == "" {
		clusterKey = request.Headers.PrimitiveID.String()
	}
	partition := s.PartitionBy([]byte(clusterKey))

	serviceInfo := storage.ServiceInfo{
		Type:      storage.ServiceType(Type),
		Namespace: s.Namespace,
		Name:      request.Headers.PrimitiveID.Name,
	}
	service, err := partition.GetService(srv.Context(), serviceInfo)
	if err != nil {
		return err
	}
	err = service.DoQueryStream(srv.Context(), elementsOp, input, stream, s.readSync)
	if err != nil {
		log.Warnf("Request ElementsRequest failed: %v", err)
		return errors.Proto(err)
	}

	for result := range ch {
		if result.Failed() {
			if result.Error == context.Canceled {
				break
			}
			log.Warnf("Request ElementsRequest failed: %v", result.Error)
			return errors.Proto(result.Error)
		}

		response := &list.ElementsResponse{}
		err = proto.Unmarshal(result.Value.([]byte), response)
		if err != nil {
			log.Errorf("Request ElementsRequest failed: %v", err)
			return errors.Proto(err)
		}

		log.Debugf("Sending ElementsResponse %+v", response)
		if err = srv.Send(response); err != nil {
			log.Warnf("Response ElementsResponse failed: %v", err)
			return err
		}
	}
	log.Debugf("Finished ElementsRequest %+v", request)
	return nil
}
