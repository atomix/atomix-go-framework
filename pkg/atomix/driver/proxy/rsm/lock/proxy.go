// Code generated by atomix-go-framework. DO NOT EDIT.
package lock

import (
	"context"
	lock "github.com/atomix/atomix-api/go/atomix/primitive/lock"
	"github.com/atomix/atomix-go-framework/pkg/atomix/driver/proxy/rsm"
	"github.com/atomix/atomix-go-framework/pkg/atomix/errors"
	"github.com/atomix/atomix-go-framework/pkg/atomix/logging"
	storage "github.com/atomix/atomix-go-framework/pkg/atomix/storage/protocol/rsm"
	streams "github.com/atomix/atomix-go-framework/pkg/atomix/stream"
	"github.com/golang/protobuf/proto"
)

const Type = "Lock"

const (
	lockOp    = "Lock"
	unlockOp  = "Unlock"
	getLockOp = "GetLock"
)

// NewProxyServer creates a new ProxyServer
func NewProxyServer(client *rsm.Client) lock.LockServiceServer {
	return &ProxyServer{
		Client: client,
		log:    logging.GetLogger("atomix", "proxy", "lock"),
	}
}

type ProxyServer struct {
	*rsm.Client
	log logging.Logger
}

func (s *ProxyServer) Lock(ctx context.Context, request *lock.LockRequest) (*lock.LockResponse, error) {
	s.log.Debugf("Received LockRequest %+v", request)
	input, err := proto.Marshal(request)
	if err != nil {
		s.log.Errorf("Request LockRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	clusterKey := request.Headers.ClusterKey
	if clusterKey == "" {
		clusterKey = request.Headers.PrimitiveID.String()
	}
	partition := s.PartitionBy([]byte(clusterKey))

	service := storage.ServiceId{
		Type:    Type,
		Cluster: request.Headers.ClusterKey,
		Name:    request.Headers.PrimitiveID.Name,
	}

	ch := make(chan streams.Result)
	stream := streams.NewChannelStream(ch)
	err = partition.DoCommandStream(ctx, service, lockOp, input, stream)
	if err != nil {
		s.log.Warnf("Request LockRequest failed: %v", err)
		return nil, errors.Proto(err)
	}

	result, ok := <-ch
	if !ok {
		return nil, context.Canceled
	}

	if result.Failed() {
		s.log.Warnf("Request LockRequest failed: %v", result.Error)
		return nil, errors.Proto(result.Error)
	}

	response := &lock.LockResponse{}
	err = proto.Unmarshal(result.Value.([]byte), response)
	if err != nil {
		s.log.Errorf("Request LockRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	s.log.Debugf("Sending LockResponse %+v", response)
	return response, nil
}

func (s *ProxyServer) Unlock(ctx context.Context, request *lock.UnlockRequest) (*lock.UnlockResponse, error) {
	s.log.Debugf("Received UnlockRequest %+v", request)
	input, err := proto.Marshal(request)
	if err != nil {
		s.log.Errorf("Request UnlockRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	clusterKey := request.Headers.ClusterKey
	if clusterKey == "" {
		clusterKey = request.Headers.PrimitiveID.String()
	}
	partition := s.PartitionBy([]byte(clusterKey))

	service := storage.ServiceId{
		Type:    Type,
		Cluster: request.Headers.ClusterKey,
		Name:    request.Headers.PrimitiveID.Name,
	}
	output, err := partition.DoCommand(ctx, service, unlockOp, input)
	if err != nil {
		s.log.Warnf("Request UnlockRequest failed: %v", err)
		return nil, errors.Proto(err)
	}

	response := &lock.UnlockResponse{}
	err = proto.Unmarshal(output, response)
	if err != nil {
		s.log.Errorf("Request UnlockRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	s.log.Debugf("Sending UnlockResponse %+v", response)
	return response, nil
}

func (s *ProxyServer) GetLock(ctx context.Context, request *lock.GetLockRequest) (*lock.GetLockResponse, error) {
	s.log.Debugf("Received GetLockRequest %+v", request)
	input, err := proto.Marshal(request)
	if err != nil {
		s.log.Errorf("Request GetLockRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	clusterKey := request.Headers.ClusterKey
	if clusterKey == "" {
		clusterKey = request.Headers.PrimitiveID.String()
	}
	partition := s.PartitionBy([]byte(clusterKey))

	service := storage.ServiceId{
		Type:    Type,
		Cluster: request.Headers.ClusterKey,
		Name:    request.Headers.PrimitiveID.Name,
	}
	output, err := partition.DoQuery(ctx, service, getLockOp, input)
	if err != nil {
		s.log.Warnf("Request GetLockRequest failed: %v", err)
		return nil, errors.Proto(err)
	}

	response := &lock.GetLockResponse{}
	err = proto.Unmarshal(output, response)
	if err != nil {
		s.log.Errorf("Request GetLockRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	s.log.Debugf("Sending GetLockResponse %+v", response)
	return response, nil
}
