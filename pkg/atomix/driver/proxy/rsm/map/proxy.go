// Code generated by atomix-go-framework. DO NOT EDIT.
package _map

import (
	"context"
	_map "github.com/atomix/atomix-api/go/atomix/primitive/map"
	"github.com/atomix/atomix-go-framework/pkg/atomix/driver/proxy/rsm"
	"github.com/atomix/atomix-go-framework/pkg/atomix/errors"
	"github.com/atomix/atomix-go-framework/pkg/atomix/logging"
	storage "github.com/atomix/atomix-go-framework/pkg/atomix/storage/protocol/rsm"
	async "github.com/atomix/atomix-go-framework/pkg/atomix/util/async"
	"github.com/golang/protobuf/proto"

	streams "github.com/atomix/atomix-go-framework/pkg/atomix/stream"
)

const Type = "Map"

const (
	sizeOp    storage.OperationID = 1
	putOp     storage.OperationID = 2
	getOp     storage.OperationID = 3
	removeOp  storage.OperationID = 4
	clearOp   storage.OperationID = 5
	eventsOp  storage.OperationID = 6
	entriesOp storage.OperationID = 7
)

var log = logging.GetLogger("atomix", "proxy", "map")

// NewProxyServer creates a new ProxyServer
func NewProxyServer(client *rsm.Client, readSync bool) _map.MapServiceServer {
	return &ProxyServer{
		Client:   client,
		readSync: readSync,
	}
}

type ProxyServer struct {
	*rsm.Client
	readSync bool
	log      logging.Logger
}

func (s *ProxyServer) Size(ctx context.Context, request *_map.SizeRequest) (*_map.SizeResponse, error) {
	log.Debugf("Received SizeRequest %+v", request)
	input, err := proto.Marshal(request)
	if err != nil {
		log.Errorf("Request SizeRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	partitions := s.Partitions()

	serviceInfo := storage.ServiceInfo{
		Type:      storage.ServiceType(Type),
		Namespace: s.Namespace,
		Name:      request.Headers.PrimitiveID.Name,
	}
	outputs, err := async.ExecuteAsync(len(partitions), func(i int) (interface{}, error) {
		service, err := partitions[i].GetService(ctx, serviceInfo)
		if err != nil {
			return nil, err
		}
		return service.DoQuery(ctx, sizeOp, input, s.readSync)
	})
	if err != nil {
		log.Warnf("Request SizeRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	responses := make([]_map.SizeResponse, 0, len(outputs))
	for _, output := range outputs {
		var response _map.SizeResponse
		err := proto.Unmarshal(output.([]byte), &response)
		if err != nil {
			log.Errorf("Request SizeRequest failed: %v", err)
			return nil, errors.Proto(err)
		}
		responses = append(responses, response)
	}

	response := &_map.SizeResponse{}
	for _, r := range responses {
		response.Size_ += r.Size_
	}
	log.Debugf("Sending SizeResponse %+v", response)
	return response, nil
}

func (s *ProxyServer) Put(ctx context.Context, request *_map.PutRequest) (*_map.PutResponse, error) {
	log.Debugf("Received PutRequest %+v", request)
	input, err := proto.Marshal(request)
	if err != nil {
		log.Errorf("Request PutRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	partitionKey := request.Entry.Key.Key
	partition := s.PartitionBy([]byte(partitionKey))

	serviceInfo := storage.ServiceInfo{
		Type:      storage.ServiceType(Type),
		Namespace: s.Namespace,
		Name:      request.Headers.PrimitiveID.Name,
	}
	service, err := partition.GetService(ctx, serviceInfo)
	if err != nil {
		log.Errorf("Request PutRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	output, err := service.DoCommand(ctx, putOp, input)
	if err != nil {
		log.Warnf("Request PutRequest failed: %v", err)
		return nil, errors.Proto(err)
	}

	response := &_map.PutResponse{}
	err = proto.Unmarshal(output, response)
	if err != nil {
		log.Errorf("Request PutRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	log.Debugf("Sending PutResponse %+v", response)
	return response, nil
}

func (s *ProxyServer) Get(ctx context.Context, request *_map.GetRequest) (*_map.GetResponse, error) {
	log.Debugf("Received GetRequest %+v", request)
	input, err := proto.Marshal(request)
	if err != nil {
		log.Errorf("Request GetRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	partitionKey := request.Key
	partition := s.PartitionBy([]byte(partitionKey))

	serviceInfo := storage.ServiceInfo{
		Type:      storage.ServiceType(Type),
		Namespace: s.Namespace,
		Name:      request.Headers.PrimitiveID.Name,
	}
	service, err := partition.GetService(ctx, serviceInfo)
	if err != nil {
		log.Errorf("Request GetRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	output, err := service.DoQuery(ctx, getOp, input, s.readSync)
	if err != nil {
		log.Warnf("Request GetRequest failed: %v", err)
		return nil, errors.Proto(err)
	}

	response := &_map.GetResponse{}
	err = proto.Unmarshal(output, response)
	if err != nil {
		log.Errorf("Request GetRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	log.Debugf("Sending GetResponse %+v", response)
	return response, nil
}

func (s *ProxyServer) Remove(ctx context.Context, request *_map.RemoveRequest) (*_map.RemoveResponse, error) {
	log.Debugf("Received RemoveRequest %+v", request)
	input, err := proto.Marshal(request)
	if err != nil {
		log.Errorf("Request RemoveRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	partitionKey := request.Key.Key
	partition := s.PartitionBy([]byte(partitionKey))

	serviceInfo := storage.ServiceInfo{
		Type:      storage.ServiceType(Type),
		Namespace: s.Namespace,
		Name:      request.Headers.PrimitiveID.Name,
	}
	service, err := partition.GetService(ctx, serviceInfo)
	if err != nil {
		log.Errorf("Request RemoveRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	output, err := service.DoCommand(ctx, removeOp, input)
	if err != nil {
		log.Warnf("Request RemoveRequest failed: %v", err)
		return nil, errors.Proto(err)
	}

	response := &_map.RemoveResponse{}
	err = proto.Unmarshal(output, response)
	if err != nil {
		log.Errorf("Request RemoveRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	log.Debugf("Sending RemoveResponse %+v", response)
	return response, nil
}

func (s *ProxyServer) Clear(ctx context.Context, request *_map.ClearRequest) (*_map.ClearResponse, error) {
	log.Debugf("Received ClearRequest %+v", request)
	input, err := proto.Marshal(request)
	if err != nil {
		log.Errorf("Request ClearRequest failed: %v", err)
		return nil, errors.Proto(err)
	}
	partitions := s.Partitions()

	serviceInfo := storage.ServiceInfo{
		Type:      storage.ServiceType(Type),
		Namespace: s.Namespace,
		Name:      request.Headers.PrimitiveID.Name,
	}
	err = async.IterAsync(len(partitions), func(i int) error {
		service, err := partitions[i].GetService(ctx, serviceInfo)
		if err != nil {
			return err
		}
		_, err = service.DoCommand(ctx, clearOp, input)
		return err
	})
	if err != nil {
		log.Warnf("Request ClearRequest failed: %v", err)
		return nil, errors.Proto(err)
	}

	response := &_map.ClearResponse{}
	log.Debugf("Sending ClearResponse %+v", response)
	return response, nil
}

func (s *ProxyServer) Events(request *_map.EventsRequest, srv _map.MapService_EventsServer) error {
	log.Debugf("Received EventsRequest %+v", request)
	input, err := proto.Marshal(request)
	if err != nil {
		log.Errorf("Request EventsRequest failed: %v", err)
		return errors.Proto(err)
	}

	ch := make(chan streams.Result)
	stream := streams.NewChannelStream(ch)
	serviceInfo := storage.ServiceInfo{
		Type:      storage.ServiceType(Type),
		Namespace: s.Namespace,
		Name:      request.Headers.PrimitiveID.Name,
	}
	partitions := s.Partitions()
	err = async.IterAsync(len(partitions), func(i int) error {
		service, err := partitions[i].GetService(srv.Context(), serviceInfo)
		if err != nil {
			return err
		}
		return service.DoCommandStream(srv.Context(), eventsOp, input, stream)
	})
	if err != nil {
		log.Warnf("Request EventsRequest failed: %v", err)
		return errors.Proto(err)
	}

	for result := range ch {
		if result.Failed() {
			if result.Error == context.Canceled {
				break
			}
			log.Warnf("Request EventsRequest failed: %v", result.Error)
			return errors.Proto(result.Error)
		}

		response := &_map.EventsResponse{}
		err = proto.Unmarshal(result.Value.([]byte), response)
		if err != nil {
			log.Errorf("Request EventsRequest failed: %v", err)
			return errors.Proto(err)
		}

		log.Debugf("Sending EventsResponse %+v", response)
		if err = srv.Send(response); err != nil {
			log.Warnf("Response EventsResponse failed: %v", err)
			return err
		}
	}
	log.Debugf("Finished EventsRequest %+v", request)
	return nil
}

func (s *ProxyServer) Entries(request *_map.EntriesRequest, srv _map.MapService_EntriesServer) error {
	log.Debugf("Received EntriesRequest %+v", request)
	input, err := proto.Marshal(request)
	if err != nil {
		log.Errorf("Request EntriesRequest failed: %v", err)
		return errors.Proto(err)
	}

	ch := make(chan streams.Result)
	stream := streams.NewChannelStream(ch)
	serviceInfo := storage.ServiceInfo{
		Type:      storage.ServiceType(Type),
		Namespace: s.Namespace,
		Name:      request.Headers.PrimitiveID.Name,
	}
	partitions := s.Partitions()
	err = async.IterAsync(len(partitions), func(i int) error {
		service, err := partitions[i].GetService(srv.Context(), serviceInfo)
		if err != nil {
			return err
		}
		return service.DoQueryStream(srv.Context(), entriesOp, input, stream, s.readSync)
	})
	if err != nil {
		log.Warnf("Request EntriesRequest failed: %v", err)
		return errors.Proto(err)
	}

	for result := range ch {
		if result.Failed() {
			if result.Error == context.Canceled {
				break
			}
			log.Warnf("Request EntriesRequest failed: %v", result.Error)
			return errors.Proto(result.Error)
		}

		response := &_map.EntriesResponse{}
		err = proto.Unmarshal(result.Value.([]byte), response)
		if err != nil {
			log.Errorf("Request EntriesRequest failed: %v", err)
			return errors.Proto(err)
		}

		log.Debugf("Sending EntriesResponse %+v", response)
		if err = srv.Send(response); err != nil {
			log.Warnf("Response EntriesResponse failed: %v", err)
			return err
		}
	}
	log.Debugf("Finished EntriesRequest %+v", request)
	return nil
}
