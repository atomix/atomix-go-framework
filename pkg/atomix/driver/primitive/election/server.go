// Code generated by atomix-go-framework. DO NOT EDIT.
package election

import (
	"context"
	driverapi "github.com/atomix/atomix-api/go/atomix/management/driver"
	election "github.com/atomix/atomix-api/go/atomix/primitive/election"
	"github.com/atomix/atomix-go-framework/pkg/atomix/driver/env"
	"github.com/atomix/atomix-go-framework/pkg/atomix/errors"
	"github.com/atomix/atomix-go-framework/pkg/atomix/logging"
)

var log = logging.GetLogger("atomix", "election")

const Type = "Election"

// NewProxyServer creates a new ProxyServer
func NewProxyServer(registry *ProxyRegistry) election.LeaderElectionServiceServer {
	return &ProxyServer{
		registry: registry,
	}
}

type ProxyServer struct {
	registry *ProxyRegistry
	env      env.DriverEnv
}

func (s *ProxyServer) Enter(ctx context.Context, request *election.EnterRequest) (*election.EnterResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive headers"))
	}
	primitiveName, ok := rsm.GetPrimitiveName(md)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive header"))
	}
	proxyID := driverapi.ProxyId{
		Type: Type,
		Name: primitiveName,
	}
	proxy, err := s.registry.GetProxy(proxyID)
	if err != nil {
		log.Warnf("EnterRequest %+v failed: %v", request, err)
		if errors.IsNotFound(err) {
			return nil, errors.NewUnavailable(err.Error())
		}
		return nil, err
	}
	return proxy.Enter(ctx, request)
}

func (s *ProxyServer) Withdraw(ctx context.Context, request *election.WithdrawRequest) (*election.WithdrawResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive headers"))
	}
	primitiveName, ok := rsm.GetPrimitiveName(md)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive header"))
	}
	proxyID := driverapi.ProxyId{
		Type: Type,
		Name: primitiveName,
	}
	proxy, err := s.registry.GetProxy(proxyID)
	if err != nil {
		log.Warnf("WithdrawRequest %+v failed: %v", request, err)
		if errors.IsNotFound(err) {
			return nil, errors.NewUnavailable(err.Error())
		}
		return nil, err
	}
	return proxy.Withdraw(ctx, request)
}

func (s *ProxyServer) Anoint(ctx context.Context, request *election.AnointRequest) (*election.AnointResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive headers"))
	}
	primitiveName, ok := rsm.GetPrimitiveName(md)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive header"))
	}
	proxyID := driverapi.ProxyId{
		Type: Type,
		Name: primitiveName,
	}
	proxy, err := s.registry.GetProxy(proxyID)
	if err != nil {
		log.Warnf("AnointRequest %+v failed: %v", request, err)
		if errors.IsNotFound(err) {
			return nil, errors.NewUnavailable(err.Error())
		}
		return nil, err
	}
	return proxy.Anoint(ctx, request)
}

func (s *ProxyServer) Promote(ctx context.Context, request *election.PromoteRequest) (*election.PromoteResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive headers"))
	}
	primitiveName, ok := rsm.GetPrimitiveName(md)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive header"))
	}
	proxyID := driverapi.ProxyId{
		Type: Type,
		Name: primitiveName,
	}
	proxy, err := s.registry.GetProxy(proxyID)
	if err != nil {
		log.Warnf("PromoteRequest %+v failed: %v", request, err)
		if errors.IsNotFound(err) {
			return nil, errors.NewUnavailable(err.Error())
		}
		return nil, err
	}
	return proxy.Promote(ctx, request)
}

func (s *ProxyServer) Evict(ctx context.Context, request *election.EvictRequest) (*election.EvictResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive headers"))
	}
	primitiveName, ok := rsm.GetPrimitiveName(md)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive header"))
	}
	proxyID := driverapi.ProxyId{
		Type: Type,
		Name: primitiveName,
	}
	proxy, err := s.registry.GetProxy(proxyID)
	if err != nil {
		log.Warnf("EvictRequest %+v failed: %v", request, err)
		if errors.IsNotFound(err) {
			return nil, errors.NewUnavailable(err.Error())
		}
		return nil, err
	}
	return proxy.Evict(ctx, request)
}

func (s *ProxyServer) GetTerm(ctx context.Context, request *election.GetTermRequest) (*election.GetTermResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive headers"))
	}
	primitiveName, ok := rsm.GetPrimitiveName(md)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive header"))
	}
	proxyID := driverapi.ProxyId{
		Type: Type,
		Name: primitiveName,
	}
	proxy, err := s.registry.GetProxy(proxyID)
	if err != nil {
		log.Warnf("GetTermRequest %+v failed: %v", request, err)
		if errors.IsNotFound(err) {
			return nil, errors.NewUnavailable(err.Error())
		}
		return nil, err
	}
	return proxy.GetTerm(ctx, request)
}

func (s *ProxyServer) Events(request *election.EventsRequest, srv election.LeaderElectionService_EventsServer) error {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive headers"))
	}
	primitiveName, ok := rsm.GetPrimitiveName(md)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive header"))
	}
	proxyID := driverapi.ProxyId{
		Type: Type,
		Name: primitiveName,
	}
	proxy, err := s.registry.GetProxy(proxyID)
	if err != nil {
		log.Warnf("EventsRequest %+v failed: %v", request, err)
		if errors.IsNotFound(err) {
			return errors.NewUnavailable(err.Error())
		}
		return err
	}
	return proxy.Events(request, srv)
}
