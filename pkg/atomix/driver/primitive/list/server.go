// Code generated by atomix-go-framework. DO NOT EDIT.

// SPDX-FileCopyrightText: 2019-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

package list

import (
	"context"
	list "github.com/atomix/atomix-api/go/atomix/primitive/list"
	"github.com/atomix/atomix-go-framework/pkg/atomix/driver/env"
	"github.com/atomix/atomix-go-framework/pkg/atomix/errors"
	"github.com/atomix/atomix-go-framework/pkg/atomix/logging"
)

var log = logging.GetLogger("atomix", "list")

// NewProxyServer creates a new ProxyServer
func NewProxyServer(registry *ProxyRegistry, env env.DriverEnv) list.ListServiceServer {
	return &ProxyServer{
		registry: registry,
		env:      env,
	}
}

type ProxyServer struct {
	registry *ProxyRegistry
	env      env.DriverEnv
}

func (s *ProxyServer) Size(ctx context.Context, request *list.SizeRequest) (*list.SizeResponse, error) {
	if request.Headers.PrimitiveID.Namespace == "" {
		request.Headers.PrimitiveID.Namespace = s.env.Namespace
	}
	proxy, err := s.registry.GetProxy(request.Headers.PrimitiveID)
	if err != nil {
		log.Warnf("SizeRequest %.250s failed: %v", request, err)
		if errors.IsNotFound(err) {
			return nil, errors.NewUnavailable(err.Error())
		}
		return nil, err
	}
	return proxy.Size(ctx, request)
}

func (s *ProxyServer) Append(ctx context.Context, request *list.AppendRequest) (*list.AppendResponse, error) {
	if request.Headers.PrimitiveID.Namespace == "" {
		request.Headers.PrimitiveID.Namespace = s.env.Namespace
	}
	proxy, err := s.registry.GetProxy(request.Headers.PrimitiveID)
	if err != nil {
		log.Warnf("AppendRequest %.250s failed: %v", request, err)
		if errors.IsNotFound(err) {
			return nil, errors.NewUnavailable(err.Error())
		}
		return nil, err
	}
	return proxy.Append(ctx, request)
}

func (s *ProxyServer) Insert(ctx context.Context, request *list.InsertRequest) (*list.InsertResponse, error) {
	if request.Headers.PrimitiveID.Namespace == "" {
		request.Headers.PrimitiveID.Namespace = s.env.Namespace
	}
	proxy, err := s.registry.GetProxy(request.Headers.PrimitiveID)
	if err != nil {
		log.Warnf("InsertRequest %.250s failed: %v", request, err)
		if errors.IsNotFound(err) {
			return nil, errors.NewUnavailable(err.Error())
		}
		return nil, err
	}
	return proxy.Insert(ctx, request)
}

func (s *ProxyServer) Get(ctx context.Context, request *list.GetRequest) (*list.GetResponse, error) {
	if request.Headers.PrimitiveID.Namespace == "" {
		request.Headers.PrimitiveID.Namespace = s.env.Namespace
	}
	proxy, err := s.registry.GetProxy(request.Headers.PrimitiveID)
	if err != nil {
		log.Warnf("GetRequest %.250s failed: %v", request, err)
		if errors.IsNotFound(err) {
			return nil, errors.NewUnavailable(err.Error())
		}
		return nil, err
	}
	return proxy.Get(ctx, request)
}

func (s *ProxyServer) Set(ctx context.Context, request *list.SetRequest) (*list.SetResponse, error) {
	if request.Headers.PrimitiveID.Namespace == "" {
		request.Headers.PrimitiveID.Namespace = s.env.Namespace
	}
	proxy, err := s.registry.GetProxy(request.Headers.PrimitiveID)
	if err != nil {
		log.Warnf("SetRequest %.250s failed: %v", request, err)
		if errors.IsNotFound(err) {
			return nil, errors.NewUnavailable(err.Error())
		}
		return nil, err
	}
	return proxy.Set(ctx, request)
}

func (s *ProxyServer) Remove(ctx context.Context, request *list.RemoveRequest) (*list.RemoveResponse, error) {
	if request.Headers.PrimitiveID.Namespace == "" {
		request.Headers.PrimitiveID.Namespace = s.env.Namespace
	}
	proxy, err := s.registry.GetProxy(request.Headers.PrimitiveID)
	if err != nil {
		log.Warnf("RemoveRequest %.250s failed: %v", request, err)
		if errors.IsNotFound(err) {
			return nil, errors.NewUnavailable(err.Error())
		}
		return nil, err
	}
	return proxy.Remove(ctx, request)
}

func (s *ProxyServer) Clear(ctx context.Context, request *list.ClearRequest) (*list.ClearResponse, error) {
	if request.Headers.PrimitiveID.Namespace == "" {
		request.Headers.PrimitiveID.Namespace = s.env.Namespace
	}
	proxy, err := s.registry.GetProxy(request.Headers.PrimitiveID)
	if err != nil {
		log.Warnf("ClearRequest %.250s failed: %v", request, err)
		if errors.IsNotFound(err) {
			return nil, errors.NewUnavailable(err.Error())
		}
		return nil, err
	}
	return proxy.Clear(ctx, request)
}

func (s *ProxyServer) Events(request *list.EventsRequest, srv list.ListService_EventsServer) error {
	if request.Headers.PrimitiveID.Namespace == "" {
		request.Headers.PrimitiveID.Namespace = s.env.Namespace
	}
	proxy, err := s.registry.GetProxy(request.Headers.PrimitiveID)
	if err != nil {
		log.Warnf("EventsRequest %.250s failed: %v", request, err)
		if errors.IsNotFound(err) {
			return errors.NewUnavailable(err.Error())
		}
		return err
	}
	return proxy.Events(request, srv)
}

func (s *ProxyServer) Elements(request *list.ElementsRequest, srv list.ListService_ElementsServer) error {
	if request.Headers.PrimitiveID.Namespace == "" {
		request.Headers.PrimitiveID.Namespace = s.env.Namespace
	}
	proxy, err := s.registry.GetProxy(request.Headers.PrimitiveID)
	if err != nil {
		log.Warnf("ElementsRequest %.250s failed: %v", request, err)
		if errors.IsNotFound(err) {
			return errors.NewUnavailable(err.Error())
		}
		return err
	}
	return proxy.Elements(request, srv)
}
