// Code generated by atomix-go-framework. DO NOT EDIT.
package counter

import (
	"context"
	driverapi "github.com/atomix/atomix-api/go/atomix/management/driver"
	counter "github.com/atomix/atomix-api/go/atomix/primitive/counter"
	"github.com/atomix/atomix-go-framework/pkg/atomix/driver/env"
	"github.com/atomix/atomix-go-framework/pkg/atomix/driver/proxy/rsm"
	"github.com/atomix/atomix-go-framework/pkg/atomix/errors"
	"github.com/atomix/atomix-go-framework/pkg/atomix/logging"
	"google.golang.org/grpc/metadata"
)

var log = logging.GetLogger("atomix", "counter")

const Type = "Counter"

// NewProxyServer creates a new ProxyServer
func NewProxyServer(registry *ProxyRegistry) counter.CounterServiceServer {
	return &ProxyServer{
		registry: registry,
	}
}

type ProxyServer struct {
	registry *ProxyRegistry
	env      env.DriverEnv
}

func (s *ProxyServer) Set(ctx context.Context, request *counter.SetRequest) (*counter.SetResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive headers"))
	}
	primitiveName, ok := rsm.GetPrimitiveName(md)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive header"))
	}
	proxyID := driverapi.ProxyId{
		Type: Type,
		Name: primitiveName,
	}
	proxy, err := s.registry.GetProxy(proxyID)
	if err != nil {
		log.Warnf("SetRequest %+v failed: %v", request, err)
		if errors.IsNotFound(err) {
			return nil, errors.NewUnavailable(err.Error())
		}
		return nil, err
	}
	return proxy.Set(ctx, request)
}

func (s *ProxyServer) Get(ctx context.Context, request *counter.GetRequest) (*counter.GetResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive headers"))
	}
	primitiveName, ok := rsm.GetPrimitiveName(md)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive header"))
	}
	proxyID := driverapi.ProxyId{
		Type: Type,
		Name: primitiveName,
	}
	proxy, err := s.registry.GetProxy(proxyID)
	if err != nil {
		log.Warnf("GetRequest %+v failed: %v", request, err)
		if errors.IsNotFound(err) {
			return nil, errors.NewUnavailable(err.Error())
		}
		return nil, err
	}
	return proxy.Get(ctx, request)
}

func (s *ProxyServer) Increment(ctx context.Context, request *counter.IncrementRequest) (*counter.IncrementResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive headers"))
	}
	primitiveName, ok := rsm.GetPrimitiveName(md)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive header"))
	}
	proxyID := driverapi.ProxyId{
		Type: Type,
		Name: primitiveName,
	}
	proxy, err := s.registry.GetProxy(proxyID)
	if err != nil {
		log.Warnf("IncrementRequest %+v failed: %v", request, err)
		if errors.IsNotFound(err) {
			return nil, errors.NewUnavailable(err.Error())
		}
		return nil, err
	}
	return proxy.Increment(ctx, request)
}

func (s *ProxyServer) Decrement(ctx context.Context, request *counter.DecrementRequest) (*counter.DecrementResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive headers"))
	}
	primitiveName, ok := rsm.GetPrimitiveName(md)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive header"))
	}
	proxyID := driverapi.ProxyId{
		Type: Type,
		Name: primitiveName,
	}
	proxy, err := s.registry.GetProxy(proxyID)
	if err != nil {
		log.Warnf("DecrementRequest %+v failed: %v", request, err)
		if errors.IsNotFound(err) {
			return nil, errors.NewUnavailable(err.Error())
		}
		return nil, err
	}
	return proxy.Decrement(ctx, request)
}
