// Code generated by atomix-go-framework. DO NOT EDIT.
package lock

import (
	"context"
	driverapi "github.com/atomix/atomix-api/go/atomix/management/driver"
	lock "github.com/atomix/atomix-api/go/atomix/primitive/lock"
	"github.com/atomix/atomix-go-framework/pkg/atomix/driver/env"
	"github.com/atomix/atomix-go-framework/pkg/atomix/errors"
	"github.com/atomix/atomix-go-framework/pkg/atomix/logging"
)

var log = logging.GetLogger("atomix", "lock")

const Type = "Lock"

// NewProxyServer creates a new ProxyServer
func NewProxyServer(registry *ProxyRegistry) lock.LockServiceServer {
	return &ProxyServer{
		registry: registry,
	}
}

type ProxyServer struct {
	registry *ProxyRegistry
	env      env.DriverEnv
}

func (s *ProxyServer) Lock(ctx context.Context, request *lock.LockRequest) (*lock.LockResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive headers"))
	}
	primitiveName, ok := rsm.GetPrimitiveName(md)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive header"))
	}
	proxyID := driverapi.ProxyId{
		Type: Type,
		Name: primitiveName,
	}
	proxy, err := s.registry.GetProxy(proxyID)
	if err != nil {
		log.Warnf("LockRequest %+v failed: %v", request, err)
		if errors.IsNotFound(err) {
			return nil, errors.NewUnavailable(err.Error())
		}
		return nil, err
	}
	return proxy.Lock(ctx, request)
}

func (s *ProxyServer) Unlock(ctx context.Context, request *lock.UnlockRequest) (*lock.UnlockResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive headers"))
	}
	primitiveName, ok := rsm.GetPrimitiveName(md)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive header"))
	}
	proxyID := driverapi.ProxyId{
		Type: Type,
		Name: primitiveName,
	}
	proxy, err := s.registry.GetProxy(proxyID)
	if err != nil {
		log.Warnf("UnlockRequest %+v failed: %v", request, err)
		if errors.IsNotFound(err) {
			return nil, errors.NewUnavailable(err.Error())
		}
		return nil, err
	}
	return proxy.Unlock(ctx, request)
}

func (s *ProxyServer) GetLock(ctx context.Context, request *lock.GetLockRequest) (*lock.GetLockResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive headers"))
	}
	primitiveName, ok := rsm.GetPrimitiveName(md)
	if !ok {
		return nil, errors.Proto(errors.NewInvalid("missing primitive header"))
	}
	proxyID := driverapi.ProxyId{
		Type: Type,
		Name: primitiveName,
	}
	proxy, err := s.registry.GetProxy(proxyID)
	if err != nil {
		log.Warnf("GetLockRequest %+v failed: %v", request, err)
		if errors.IsNotFound(err) {
			return nil, errors.NewUnavailable(err.Error())
		}
		return nil, err
	}
	return proxy.GetLock(ctx, request)
}
